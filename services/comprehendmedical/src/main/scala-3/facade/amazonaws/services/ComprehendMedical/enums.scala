package facade.amazonaws.services.comprehendmedical

import scalajs._

type AttributeName = "SIGN" | "SYMPTOM" | "DIAGNOSIS" | "NEGATION"
object AttributeName {
  val SIGN: "SIGN" = "SIGN"
  val SYMPTOM: "SYMPTOM" = "SYMPTOM"
  val DIAGNOSIS: "DIAGNOSIS" = "DIAGNOSIS"
  val NEGATION: "NEGATION" = "NEGATION"

  @inline def values = js.Array[AttributeName](SIGN, SYMPTOM, DIAGNOSIS, NEGATION)
}

type EntitySubType = "NAME" | "DOSAGE" | "ROUTE_OR_MODE" | "FORM" | "FREQUENCY" | "DURATION" | "GENERIC_NAME" | "BRAND_NAME" | "STRENGTH" | "RATE" | "ACUITY" | "TEST_NAME" | "TEST_VALUE" | "TEST_UNITS" | "PROCEDURE_NAME" | "TREATMENT_NAME" | "DATE" | "AGE" | "CONTACT_POINT" | "EMAIL" | "IDENTIFIER" | "URL" | "ADDRESS" | "PROFESSION" | "SYSTEM_ORGAN_SITE" | "DIRECTION" | "QUALITY" | "QUANTITY" | "TIME_EXPRESSION" | "TIME_TO_MEDICATION_NAME" | "TIME_TO_DX_NAME" | "TIME_TO_TEST_NAME" | "TIME_TO_PROCEDURE_NAME" | "TIME_TO_TREATMENT_NAME"
object EntitySubType {
  val NAME: "NAME" = "NAME"
  val DOSAGE: "DOSAGE" = "DOSAGE"
  val ROUTE_OR_MODE: "ROUTE_OR_MODE" = "ROUTE_OR_MODE"
  val FORM: "FORM" = "FORM"
  val FREQUENCY: "FREQUENCY" = "FREQUENCY"
  val DURATION: "DURATION" = "DURATION"
  val GENERIC_NAME: "GENERIC_NAME" = "GENERIC_NAME"
  val BRAND_NAME: "BRAND_NAME" = "BRAND_NAME"
  val STRENGTH: "STRENGTH" = "STRENGTH"
  val RATE: "RATE" = "RATE"
  val ACUITY: "ACUITY" = "ACUITY"
  val TEST_NAME: "TEST_NAME" = "TEST_NAME"
  val TEST_VALUE: "TEST_VALUE" = "TEST_VALUE"
  val TEST_UNITS: "TEST_UNITS" = "TEST_UNITS"
  val PROCEDURE_NAME: "PROCEDURE_NAME" = "PROCEDURE_NAME"
  val TREATMENT_NAME: "TREATMENT_NAME" = "TREATMENT_NAME"
  val DATE: "DATE" = "DATE"
  val AGE: "AGE" = "AGE"
  val CONTACT_POINT: "CONTACT_POINT" = "CONTACT_POINT"
  val EMAIL: "EMAIL" = "EMAIL"
  val IDENTIFIER: "IDENTIFIER" = "IDENTIFIER"
  val URL: "URL" = "URL"
  val ADDRESS: "ADDRESS" = "ADDRESS"
  val PROFESSION: "PROFESSION" = "PROFESSION"
  val SYSTEM_ORGAN_SITE: "SYSTEM_ORGAN_SITE" = "SYSTEM_ORGAN_SITE"
  val DIRECTION: "DIRECTION" = "DIRECTION"
  val QUALITY: "QUALITY" = "QUALITY"
  val QUANTITY: "QUANTITY" = "QUANTITY"
  val TIME_EXPRESSION: "TIME_EXPRESSION" = "TIME_EXPRESSION"
  val TIME_TO_MEDICATION_NAME: "TIME_TO_MEDICATION_NAME" = "TIME_TO_MEDICATION_NAME"
  val TIME_TO_DX_NAME: "TIME_TO_DX_NAME" = "TIME_TO_DX_NAME"
  val TIME_TO_TEST_NAME: "TIME_TO_TEST_NAME" = "TIME_TO_TEST_NAME"
  val TIME_TO_PROCEDURE_NAME: "TIME_TO_PROCEDURE_NAME" = "TIME_TO_PROCEDURE_NAME"
  val TIME_TO_TREATMENT_NAME: "TIME_TO_TREATMENT_NAME" = "TIME_TO_TREATMENT_NAME"

  @inline def values = js.Array[EntitySubType](
    NAME,
    DOSAGE,
    ROUTE_OR_MODE,
    FORM,
    FREQUENCY,
    DURATION,
    GENERIC_NAME,
    BRAND_NAME,
    STRENGTH,
    RATE,
    ACUITY,
    TEST_NAME,
    TEST_VALUE,
    TEST_UNITS,
    PROCEDURE_NAME,
    TREATMENT_NAME,
    DATE,
    AGE,
    CONTACT_POINT,
    EMAIL,
    IDENTIFIER,
    URL,
    ADDRESS,
    PROFESSION,
    SYSTEM_ORGAN_SITE,
    DIRECTION,
    QUALITY,
    QUANTITY,
    TIME_EXPRESSION,
    TIME_TO_MEDICATION_NAME,
    TIME_TO_DX_NAME,
    TIME_TO_TEST_NAME,
    TIME_TO_PROCEDURE_NAME,
    TIME_TO_TREATMENT_NAME
  )
}

type EntityType = "MEDICATION" | "MEDICAL_CONDITION" | "PROTECTED_HEALTH_INFORMATION" | "TEST_TREATMENT_PROCEDURE" | "ANATOMY" | "TIME_EXPRESSION"
object EntityType {
  val MEDICATION: "MEDICATION" = "MEDICATION"
  val MEDICAL_CONDITION: "MEDICAL_CONDITION" = "MEDICAL_CONDITION"
  val PROTECTED_HEALTH_INFORMATION: "PROTECTED_HEALTH_INFORMATION" = "PROTECTED_HEALTH_INFORMATION"
  val TEST_TREATMENT_PROCEDURE: "TEST_TREATMENT_PROCEDURE" = "TEST_TREATMENT_PROCEDURE"
  val ANATOMY: "ANATOMY" = "ANATOMY"
  val TIME_EXPRESSION: "TIME_EXPRESSION" = "TIME_EXPRESSION"

  @inline def values = js.Array[EntityType](MEDICATION, MEDICAL_CONDITION, PROTECTED_HEALTH_INFORMATION, TEST_TREATMENT_PROCEDURE, ANATOMY, TIME_EXPRESSION)
}

type ICD10CMAttributeType = "ACUITY" | "DIRECTION" | "SYSTEM_ORGAN_SITE" | "QUALITY" | "QUANTITY" | "TIME_TO_DX_NAME" | "TIME_EXPRESSION"
object ICD10CMAttributeType {
  val ACUITY: "ACUITY" = "ACUITY"
  val DIRECTION: "DIRECTION" = "DIRECTION"
  val SYSTEM_ORGAN_SITE: "SYSTEM_ORGAN_SITE" = "SYSTEM_ORGAN_SITE"
  val QUALITY: "QUALITY" = "QUALITY"
  val QUANTITY: "QUANTITY" = "QUANTITY"
  val TIME_TO_DX_NAME: "TIME_TO_DX_NAME" = "TIME_TO_DX_NAME"
  val TIME_EXPRESSION: "TIME_EXPRESSION" = "TIME_EXPRESSION"

  @inline def values = js.Array[ICD10CMAttributeType](ACUITY, DIRECTION, SYSTEM_ORGAN_SITE, QUALITY, QUANTITY, TIME_TO_DX_NAME, TIME_EXPRESSION)
}

type ICD10CMEntityCategory = "MEDICAL_CONDITION"
object ICD10CMEntityCategory {
  val MEDICAL_CONDITION: "MEDICAL_CONDITION" = "MEDICAL_CONDITION"

  @inline def values = js.Array[ICD10CMEntityCategory](MEDICAL_CONDITION)
}

type ICD10CMEntityType = "DX_NAME" | "TIME_EXPRESSION"
object ICD10CMEntityType {
  val DX_NAME: "DX_NAME" = "DX_NAME"
  val TIME_EXPRESSION: "TIME_EXPRESSION" = "TIME_EXPRESSION"

  @inline def values = js.Array[ICD10CMEntityType](DX_NAME, TIME_EXPRESSION)
}

type ICD10CMRelationshipType = "OVERLAP" | "SYSTEM_ORGAN_SITE"
object ICD10CMRelationshipType {
  val OVERLAP: "OVERLAP" = "OVERLAP"
  val SYSTEM_ORGAN_SITE: "SYSTEM_ORGAN_SITE" = "SYSTEM_ORGAN_SITE"

  @inline def values = js.Array[ICD10CMRelationshipType](OVERLAP, SYSTEM_ORGAN_SITE)
}

type ICD10CMTraitName = "NEGATION" | "DIAGNOSIS" | "SIGN" | "SYMPTOM"
object ICD10CMTraitName {
  val NEGATION: "NEGATION" = "NEGATION"
  val DIAGNOSIS: "DIAGNOSIS" = "DIAGNOSIS"
  val SIGN: "SIGN" = "SIGN"
  val SYMPTOM: "SYMPTOM" = "SYMPTOM"

  @inline def values = js.Array[ICD10CMTraitName](NEGATION, DIAGNOSIS, SIGN, SYMPTOM)
}

type JobStatus = "SUBMITTED" | "IN_PROGRESS" | "COMPLETED" | "PARTIAL_SUCCESS" | "FAILED" | "STOP_REQUESTED" | "STOPPED"
object JobStatus {
  val SUBMITTED: "SUBMITTED" = "SUBMITTED"
  val IN_PROGRESS: "IN_PROGRESS" = "IN_PROGRESS"
  val COMPLETED: "COMPLETED" = "COMPLETED"
  val PARTIAL_SUCCESS: "PARTIAL_SUCCESS" = "PARTIAL_SUCCESS"
  val FAILED: "FAILED" = "FAILED"
  val STOP_REQUESTED: "STOP_REQUESTED" = "STOP_REQUESTED"
  val STOPPED: "STOPPED" = "STOPPED"

  @inline def values = js.Array[JobStatus](SUBMITTED, IN_PROGRESS, COMPLETED, PARTIAL_SUCCESS, FAILED, STOP_REQUESTED, STOPPED)
}

type LanguageCode = "en"
object LanguageCode {
  val en: "en" = "en"

  @inline def values = js.Array[LanguageCode](en)
}

type RelationshipType = "EVERY" | "WITH_DOSAGE" | "ADMINISTERED_VIA" | "FOR" | "NEGATIVE" | "OVERLAP" | "DOSAGE" | "ROUTE_OR_MODE" | "FORM" | "FREQUENCY" | "DURATION" | "STRENGTH" | "RATE" | "ACUITY" | "TEST_VALUE" | "TEST_UNITS" | "DIRECTION" | "SYSTEM_ORGAN_SITE"
object RelationshipType {
  val EVERY: "EVERY" = "EVERY"
  val WITH_DOSAGE: "WITH_DOSAGE" = "WITH_DOSAGE"
  val ADMINISTERED_VIA: "ADMINISTERED_VIA" = "ADMINISTERED_VIA"
  val FOR: "FOR" = "FOR"
  val NEGATIVE: "NEGATIVE" = "NEGATIVE"
  val OVERLAP: "OVERLAP" = "OVERLAP"
  val DOSAGE: "DOSAGE" = "DOSAGE"
  val ROUTE_OR_MODE: "ROUTE_OR_MODE" = "ROUTE_OR_MODE"
  val FORM: "FORM" = "FORM"
  val FREQUENCY: "FREQUENCY" = "FREQUENCY"
  val DURATION: "DURATION" = "DURATION"
  val STRENGTH: "STRENGTH" = "STRENGTH"
  val RATE: "RATE" = "RATE"
  val ACUITY: "ACUITY" = "ACUITY"
  val TEST_VALUE: "TEST_VALUE" = "TEST_VALUE"
  val TEST_UNITS: "TEST_UNITS" = "TEST_UNITS"
  val DIRECTION: "DIRECTION" = "DIRECTION"
  val SYSTEM_ORGAN_SITE: "SYSTEM_ORGAN_SITE" = "SYSTEM_ORGAN_SITE"

  @inline def values = js.Array[RelationshipType](
    EVERY,
    WITH_DOSAGE,
    ADMINISTERED_VIA,
    FOR,
    NEGATIVE,
    OVERLAP,
    DOSAGE,
    ROUTE_OR_MODE,
    FORM,
    FREQUENCY,
    DURATION,
    STRENGTH,
    RATE,
    ACUITY,
    TEST_VALUE,
    TEST_UNITS,
    DIRECTION,
    SYSTEM_ORGAN_SITE
  )
}

type RxNormAttributeType = "DOSAGE" | "DURATION" | "FORM" | "FREQUENCY" | "RATE" | "ROUTE_OR_MODE" | "STRENGTH"
object RxNormAttributeType {
  val DOSAGE: "DOSAGE" = "DOSAGE"
  val DURATION: "DURATION" = "DURATION"
  val FORM: "FORM" = "FORM"
  val FREQUENCY: "FREQUENCY" = "FREQUENCY"
  val RATE: "RATE" = "RATE"
  val ROUTE_OR_MODE: "ROUTE_OR_MODE" = "ROUTE_OR_MODE"
  val STRENGTH: "STRENGTH" = "STRENGTH"

  @inline def values = js.Array[RxNormAttributeType](DOSAGE, DURATION, FORM, FREQUENCY, RATE, ROUTE_OR_MODE, STRENGTH)
}

type RxNormEntityCategory = "MEDICATION"
object RxNormEntityCategory {
  val MEDICATION: "MEDICATION" = "MEDICATION"

  @inline def values = js.Array[RxNormEntityCategory](MEDICATION)
}

type RxNormEntityType = "BRAND_NAME" | "GENERIC_NAME"
object RxNormEntityType {
  val BRAND_NAME: "BRAND_NAME" = "BRAND_NAME"
  val GENERIC_NAME: "GENERIC_NAME" = "GENERIC_NAME"

  @inline def values = js.Array[RxNormEntityType](BRAND_NAME, GENERIC_NAME)
}

type RxNormTraitName = "NEGATION"
object RxNormTraitName {
  val NEGATION: "NEGATION" = "NEGATION"

  @inline def values = js.Array[RxNormTraitName](NEGATION)
}
