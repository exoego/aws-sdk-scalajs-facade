package facade.amazonaws.services.emrcontainers

import scalajs._

type ContainerProviderType = "EKS"
object ContainerProviderType {
  val EKS: "EKS" = "EKS"

  @inline def values = js.Array[ContainerProviderType](EKS)
}

type EndpointState = "CREATING" | "ACTIVE" | "TERMINATING" | "TERMINATED" | "TERMINATED_WITH_ERRORS"
object EndpointState {
  val CREATING: "CREATING" = "CREATING"
  val ACTIVE: "ACTIVE" = "ACTIVE"
  val TERMINATING: "TERMINATING" = "TERMINATING"
  val TERMINATED: "TERMINATED" = "TERMINATED"
  val TERMINATED_WITH_ERRORS: "TERMINATED_WITH_ERRORS" = "TERMINATED_WITH_ERRORS"

  @inline def values = js.Array[EndpointState](CREATING, ACTIVE, TERMINATING, TERMINATED, TERMINATED_WITH_ERRORS)
}

type FailureReason = "INTERNAL_ERROR" | "USER_ERROR" | "VALIDATION_ERROR" | "CLUSTER_UNAVAILABLE"
object FailureReason {
  val INTERNAL_ERROR: "INTERNAL_ERROR" = "INTERNAL_ERROR"
  val USER_ERROR: "USER_ERROR" = "USER_ERROR"
  val VALIDATION_ERROR: "VALIDATION_ERROR" = "VALIDATION_ERROR"
  val CLUSTER_UNAVAILABLE: "CLUSTER_UNAVAILABLE" = "CLUSTER_UNAVAILABLE"

  @inline def values = js.Array[FailureReason](INTERNAL_ERROR, USER_ERROR, VALIDATION_ERROR, CLUSTER_UNAVAILABLE)
}

type JobRunState = "PENDING" | "SUBMITTED" | "RUNNING" | "FAILED" | "CANCELLED" | "CANCEL_PENDING" | "COMPLETED"
object JobRunState {
  val PENDING: "PENDING" = "PENDING"
  val SUBMITTED: "SUBMITTED" = "SUBMITTED"
  val RUNNING: "RUNNING" = "RUNNING"
  val FAILED: "FAILED" = "FAILED"
  val CANCELLED: "CANCELLED" = "CANCELLED"
  val CANCEL_PENDING: "CANCEL_PENDING" = "CANCEL_PENDING"
  val COMPLETED: "COMPLETED" = "COMPLETED"

  @inline def values = js.Array[JobRunState](PENDING, SUBMITTED, RUNNING, FAILED, CANCELLED, CANCEL_PENDING, COMPLETED)
}

type PersistentAppUI = "ENABLED" | "DISABLED"
object PersistentAppUI {
  val ENABLED: "ENABLED" = "ENABLED"
  val DISABLED: "DISABLED" = "DISABLED"

  @inline def values = js.Array[PersistentAppUI](ENABLED, DISABLED)
}

type VirtualClusterState = "RUNNING" | "TERMINATING" | "TERMINATED" | "ARRESTED"
object VirtualClusterState {
  val RUNNING: "RUNNING" = "RUNNING"
  val TERMINATING: "TERMINATING" = "TERMINATING"
  val TERMINATED: "TERMINATED" = "TERMINATED"
  val ARRESTED: "ARRESTED" = "ARRESTED"

  @inline def values = js.Array[VirtualClusterState](RUNNING, TERMINATING, TERMINATED, ARRESTED)
}
