package facade.amazonaws.services.connectparticipant

import scalajs._

type ArtifactStatus = "APPROVED" | "REJECTED" | "IN_PROGRESS"
object ArtifactStatus {
  val APPROVED: "APPROVED" = "APPROVED"
  val REJECTED: "REJECTED" = "REJECTED"
  val IN_PROGRESS: "IN_PROGRESS" = "IN_PROGRESS"

  @inline def values = js.Array[ArtifactStatus](APPROVED, REJECTED, IN_PROGRESS)
}

type ChatItemType = "TYPING" | "PARTICIPANT_JOINED" | "PARTICIPANT_LEFT" | "CHAT_ENDED" | "TRANSFER_SUCCEEDED" | "TRANSFER_FAILED" | "MESSAGE" | "EVENT" | "ATTACHMENT" | "CONNECTION_ACK"
object ChatItemType {
  val TYPING: "TYPING" = "TYPING"
  val PARTICIPANT_JOINED: "PARTICIPANT_JOINED" = "PARTICIPANT_JOINED"
  val PARTICIPANT_LEFT: "PARTICIPANT_LEFT" = "PARTICIPANT_LEFT"
  val CHAT_ENDED: "CHAT_ENDED" = "CHAT_ENDED"
  val TRANSFER_SUCCEEDED: "TRANSFER_SUCCEEDED" = "TRANSFER_SUCCEEDED"
  val TRANSFER_FAILED: "TRANSFER_FAILED" = "TRANSFER_FAILED"
  val MESSAGE: "MESSAGE" = "MESSAGE"
  val EVENT: "EVENT" = "EVENT"
  val ATTACHMENT: "ATTACHMENT" = "ATTACHMENT"
  val CONNECTION_ACK: "CONNECTION_ACK" = "CONNECTION_ACK"

  @inline def values = js.Array[ChatItemType](TYPING, PARTICIPANT_JOINED, PARTICIPANT_LEFT, CHAT_ENDED, TRANSFER_SUCCEEDED, TRANSFER_FAILED, MESSAGE, EVENT, ATTACHMENT, CONNECTION_ACK)
}

type ConnectionType = "WEBSOCKET" | "CONNECTION_CREDENTIALS"
object ConnectionType {
  val WEBSOCKET: "WEBSOCKET" = "WEBSOCKET"
  val CONNECTION_CREDENTIALS: "CONNECTION_CREDENTIALS" = "CONNECTION_CREDENTIALS"

  @inline def values = js.Array[ConnectionType](WEBSOCKET, CONNECTION_CREDENTIALS)
}

type ParticipantRole = "AGENT" | "CUSTOMER" | "SYSTEM"
object ParticipantRole {
  val AGENT: "AGENT" = "AGENT"
  val CUSTOMER: "CUSTOMER" = "CUSTOMER"
  val SYSTEM: "SYSTEM" = "SYSTEM"

  @inline def values = js.Array[ParticipantRole](AGENT, CUSTOMER, SYSTEM)
}

type ScanDirection = "FORWARD" | "BACKWARD"
object ScanDirection {
  val FORWARD: "FORWARD" = "FORWARD"
  val BACKWARD: "BACKWARD" = "BACKWARD"

  @inline def values = js.Array[ScanDirection](FORWARD, BACKWARD)
}

type SortKey = "DESCENDING" | "ASCENDING"
object SortKey {
  val DESCENDING: "DESCENDING" = "DESCENDING"
  val ASCENDING: "ASCENDING" = "ASCENDING"

  @inline def values = js.Array[SortKey](DESCENDING, ASCENDING)
}
