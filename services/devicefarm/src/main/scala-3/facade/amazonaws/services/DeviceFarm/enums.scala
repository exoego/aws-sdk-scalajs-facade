package facade.amazonaws.services.devicefarm

import scalajs._

type ArtifactCategory = "SCREENSHOT" | "FILE" | "LOG"
object ArtifactCategory {
  val SCREENSHOT: "SCREENSHOT" = "SCREENSHOT"
  val FILE: "FILE" = "FILE"
  val LOG: "LOG" = "LOG"

  @inline def values = js.Array[ArtifactCategory](SCREENSHOT, FILE, LOG)
}

type ArtifactType = "UNKNOWN" | "SCREENSHOT" | "DEVICE_LOG" | "MESSAGE_LOG" | "VIDEO_LOG" | "RESULT_LOG" | "SERVICE_LOG" | "WEBKIT_LOG" | "INSTRUMENTATION_OUTPUT" | "EXERCISER_MONKEY_OUTPUT" | "CALABASH_JSON_OUTPUT" | "CALABASH_PRETTY_OUTPUT" | "CALABASH_STANDARD_OUTPUT" | "CALABASH_JAVA_XML_OUTPUT" | "AUTOMATION_OUTPUT" | "APPIUM_SERVER_OUTPUT" | "APPIUM_JAVA_OUTPUT" | "APPIUM_JAVA_XML_OUTPUT" | "APPIUM_PYTHON_OUTPUT" | "APPIUM_PYTHON_XML_OUTPUT" | "EXPLORER_EVENT_LOG" | "EXPLORER_SUMMARY_LOG" | "APPLICATION_CRASH_REPORT" | "XCTEST_LOG" | "VIDEO" | "CUSTOMER_ARTIFACT" | "CUSTOMER_ARTIFACT_LOG" | "TESTSPEC_OUTPUT"
object ArtifactType {
  val UNKNOWN: "UNKNOWN" = "UNKNOWN"
  val SCREENSHOT: "SCREENSHOT" = "SCREENSHOT"
  val DEVICE_LOG: "DEVICE_LOG" = "DEVICE_LOG"
  val MESSAGE_LOG: "MESSAGE_LOG" = "MESSAGE_LOG"
  val VIDEO_LOG: "VIDEO_LOG" = "VIDEO_LOG"
  val RESULT_LOG: "RESULT_LOG" = "RESULT_LOG"
  val SERVICE_LOG: "SERVICE_LOG" = "SERVICE_LOG"
  val WEBKIT_LOG: "WEBKIT_LOG" = "WEBKIT_LOG"
  val INSTRUMENTATION_OUTPUT: "INSTRUMENTATION_OUTPUT" = "INSTRUMENTATION_OUTPUT"
  val EXERCISER_MONKEY_OUTPUT: "EXERCISER_MONKEY_OUTPUT" = "EXERCISER_MONKEY_OUTPUT"
  val CALABASH_JSON_OUTPUT: "CALABASH_JSON_OUTPUT" = "CALABASH_JSON_OUTPUT"
  val CALABASH_PRETTY_OUTPUT: "CALABASH_PRETTY_OUTPUT" = "CALABASH_PRETTY_OUTPUT"
  val CALABASH_STANDARD_OUTPUT: "CALABASH_STANDARD_OUTPUT" = "CALABASH_STANDARD_OUTPUT"
  val CALABASH_JAVA_XML_OUTPUT: "CALABASH_JAVA_XML_OUTPUT" = "CALABASH_JAVA_XML_OUTPUT"
  val AUTOMATION_OUTPUT: "AUTOMATION_OUTPUT" = "AUTOMATION_OUTPUT"
  val APPIUM_SERVER_OUTPUT: "APPIUM_SERVER_OUTPUT" = "APPIUM_SERVER_OUTPUT"
  val APPIUM_JAVA_OUTPUT: "APPIUM_JAVA_OUTPUT" = "APPIUM_JAVA_OUTPUT"
  val APPIUM_JAVA_XML_OUTPUT: "APPIUM_JAVA_XML_OUTPUT" = "APPIUM_JAVA_XML_OUTPUT"
  val APPIUM_PYTHON_OUTPUT: "APPIUM_PYTHON_OUTPUT" = "APPIUM_PYTHON_OUTPUT"
  val APPIUM_PYTHON_XML_OUTPUT: "APPIUM_PYTHON_XML_OUTPUT" = "APPIUM_PYTHON_XML_OUTPUT"
  val EXPLORER_EVENT_LOG: "EXPLORER_EVENT_LOG" = "EXPLORER_EVENT_LOG"
  val EXPLORER_SUMMARY_LOG: "EXPLORER_SUMMARY_LOG" = "EXPLORER_SUMMARY_LOG"
  val APPLICATION_CRASH_REPORT: "APPLICATION_CRASH_REPORT" = "APPLICATION_CRASH_REPORT"
  val XCTEST_LOG: "XCTEST_LOG" = "XCTEST_LOG"
  val VIDEO: "VIDEO" = "VIDEO"
  val CUSTOMER_ARTIFACT: "CUSTOMER_ARTIFACT" = "CUSTOMER_ARTIFACT"
  val CUSTOMER_ARTIFACT_LOG: "CUSTOMER_ARTIFACT_LOG" = "CUSTOMER_ARTIFACT_LOG"
  val TESTSPEC_OUTPUT: "TESTSPEC_OUTPUT" = "TESTSPEC_OUTPUT"

  @inline def values = js.Array[ArtifactType](
    UNKNOWN,
    SCREENSHOT,
    DEVICE_LOG,
    MESSAGE_LOG,
    VIDEO_LOG,
    RESULT_LOG,
    SERVICE_LOG,
    WEBKIT_LOG,
    INSTRUMENTATION_OUTPUT,
    EXERCISER_MONKEY_OUTPUT,
    CALABASH_JSON_OUTPUT,
    CALABASH_PRETTY_OUTPUT,
    CALABASH_STANDARD_OUTPUT,
    CALABASH_JAVA_XML_OUTPUT,
    AUTOMATION_OUTPUT,
    APPIUM_SERVER_OUTPUT,
    APPIUM_JAVA_OUTPUT,
    APPIUM_JAVA_XML_OUTPUT,
    APPIUM_PYTHON_OUTPUT,
    APPIUM_PYTHON_XML_OUTPUT,
    EXPLORER_EVENT_LOG,
    EXPLORER_SUMMARY_LOG,
    APPLICATION_CRASH_REPORT,
    XCTEST_LOG,
    VIDEO,
    CUSTOMER_ARTIFACT,
    CUSTOMER_ARTIFACT_LOG,
    TESTSPEC_OUTPUT
  )
}

type BillingMethod = "METERED" | "UNMETERED"
object BillingMethod {
  val METERED: "METERED" = "METERED"
  val UNMETERED: "UNMETERED" = "UNMETERED"

  @inline def values = js.Array[BillingMethod](METERED, UNMETERED)
}

type CurrencyCode = "USD"
object CurrencyCode {
  val USD: "USD" = "USD"

  @inline def values = js.Array[CurrencyCode](USD)
}

type DeviceAttribute = "ARN" | "PLATFORM" | "FORM_FACTOR" | "MANUFACTURER" | "REMOTE_ACCESS_ENABLED" | "REMOTE_DEBUG_ENABLED" | "APPIUM_VERSION" | "INSTANCE_ARN" | "INSTANCE_LABELS" | "FLEET_TYPE" | "OS_VERSION" | "MODEL" | "AVAILABILITY"
object DeviceAttribute {
  val ARN: "ARN" = "ARN"
  val PLATFORM: "PLATFORM" = "PLATFORM"
  val FORM_FACTOR: "FORM_FACTOR" = "FORM_FACTOR"
  val MANUFACTURER: "MANUFACTURER" = "MANUFACTURER"
  val REMOTE_ACCESS_ENABLED: "REMOTE_ACCESS_ENABLED" = "REMOTE_ACCESS_ENABLED"
  val REMOTE_DEBUG_ENABLED: "REMOTE_DEBUG_ENABLED" = "REMOTE_DEBUG_ENABLED"
  val APPIUM_VERSION: "APPIUM_VERSION" = "APPIUM_VERSION"
  val INSTANCE_ARN: "INSTANCE_ARN" = "INSTANCE_ARN"
  val INSTANCE_LABELS: "INSTANCE_LABELS" = "INSTANCE_LABELS"
  val FLEET_TYPE: "FLEET_TYPE" = "FLEET_TYPE"
  val OS_VERSION: "OS_VERSION" = "OS_VERSION"
  val MODEL: "MODEL" = "MODEL"
  val AVAILABILITY: "AVAILABILITY" = "AVAILABILITY"

  @inline def values = js.Array[DeviceAttribute](
    ARN,
    PLATFORM,
    FORM_FACTOR,
    MANUFACTURER,
    REMOTE_ACCESS_ENABLED,
    REMOTE_DEBUG_ENABLED,
    APPIUM_VERSION,
    INSTANCE_ARN,
    INSTANCE_LABELS,
    FLEET_TYPE,
    OS_VERSION,
    MODEL,
    AVAILABILITY
  )
}

type DeviceAvailability = "TEMPORARY_NOT_AVAILABLE" | "BUSY" | "AVAILABLE" | "HIGHLY_AVAILABLE"
object DeviceAvailability {
  val TEMPORARY_NOT_AVAILABLE: "TEMPORARY_NOT_AVAILABLE" = "TEMPORARY_NOT_AVAILABLE"
  val BUSY: "BUSY" = "BUSY"
  val AVAILABLE: "AVAILABLE" = "AVAILABLE"
  val HIGHLY_AVAILABLE: "HIGHLY_AVAILABLE" = "HIGHLY_AVAILABLE"

  @inline def values = js.Array[DeviceAvailability](TEMPORARY_NOT_AVAILABLE, BUSY, AVAILABLE, HIGHLY_AVAILABLE)
}

type DeviceFilterAttribute = "ARN" | "PLATFORM" | "OS_VERSION" | "MODEL" | "AVAILABILITY" | "FORM_FACTOR" | "MANUFACTURER" | "REMOTE_ACCESS_ENABLED" | "REMOTE_DEBUG_ENABLED" | "INSTANCE_ARN" | "INSTANCE_LABELS" | "FLEET_TYPE"
object DeviceFilterAttribute {
  val ARN: "ARN" = "ARN"
  val PLATFORM: "PLATFORM" = "PLATFORM"
  val OS_VERSION: "OS_VERSION" = "OS_VERSION"
  val MODEL: "MODEL" = "MODEL"
  val AVAILABILITY: "AVAILABILITY" = "AVAILABILITY"
  val FORM_FACTOR: "FORM_FACTOR" = "FORM_FACTOR"
  val MANUFACTURER: "MANUFACTURER" = "MANUFACTURER"
  val REMOTE_ACCESS_ENABLED: "REMOTE_ACCESS_ENABLED" = "REMOTE_ACCESS_ENABLED"
  val REMOTE_DEBUG_ENABLED: "REMOTE_DEBUG_ENABLED" = "REMOTE_DEBUG_ENABLED"
  val INSTANCE_ARN: "INSTANCE_ARN" = "INSTANCE_ARN"
  val INSTANCE_LABELS: "INSTANCE_LABELS" = "INSTANCE_LABELS"
  val FLEET_TYPE: "FLEET_TYPE" = "FLEET_TYPE"

  @inline def values = js.Array[DeviceFilterAttribute](
    ARN,
    PLATFORM,
    OS_VERSION,
    MODEL,
    AVAILABILITY,
    FORM_FACTOR,
    MANUFACTURER,
    REMOTE_ACCESS_ENABLED,
    REMOTE_DEBUG_ENABLED,
    INSTANCE_ARN,
    INSTANCE_LABELS,
    FLEET_TYPE
  )
}

type DeviceFormFactor = "PHONE" | "TABLET"
object DeviceFormFactor {
  val PHONE: "PHONE" = "PHONE"
  val TABLET: "TABLET" = "TABLET"

  @inline def values = js.Array[DeviceFormFactor](PHONE, TABLET)
}

type DevicePlatform = "ANDROID" | "IOS"
object DevicePlatform {
  val ANDROID: "ANDROID" = "ANDROID"
  val IOS: "IOS" = "IOS"

  @inline def values = js.Array[DevicePlatform](ANDROID, IOS)
}

type DevicePoolType = "CURATED" | "PRIVATE"
object DevicePoolType {
  val CURATED: "CURATED" = "CURATED"
  val PRIVATE: "PRIVATE" = "PRIVATE"

  @inline def values = js.Array[DevicePoolType](CURATED, PRIVATE)
}

type ExecutionResult = "PENDING" | "PASSED" | "WARNED" | "FAILED" | "SKIPPED" | "ERRORED" | "STOPPED"
object ExecutionResult {
  val PENDING: "PENDING" = "PENDING"
  val PASSED: "PASSED" = "PASSED"
  val WARNED: "WARNED" = "WARNED"
  val FAILED: "FAILED" = "FAILED"
  val SKIPPED: "SKIPPED" = "SKIPPED"
  val ERRORED: "ERRORED" = "ERRORED"
  val STOPPED: "STOPPED" = "STOPPED"

  @inline def values = js.Array[ExecutionResult](PENDING, PASSED, WARNED, FAILED, SKIPPED, ERRORED, STOPPED)
}

type ExecutionResultCode = "PARSING_FAILED" | "VPC_ENDPOINT_SETUP_FAILED"
object ExecutionResultCode {
  val PARSING_FAILED: "PARSING_FAILED" = "PARSING_FAILED"
  val VPC_ENDPOINT_SETUP_FAILED: "VPC_ENDPOINT_SETUP_FAILED" = "VPC_ENDPOINT_SETUP_FAILED"

  @inline def values = js.Array[ExecutionResultCode](PARSING_FAILED, VPC_ENDPOINT_SETUP_FAILED)
}

type ExecutionStatus = "PENDING" | "PENDING_CONCURRENCY" | "PENDING_DEVICE" | "PROCESSING" | "SCHEDULING" | "PREPARING" | "RUNNING" | "COMPLETED" | "STOPPING"
object ExecutionStatus {
  val PENDING: "PENDING" = "PENDING"
  val PENDING_CONCURRENCY: "PENDING_CONCURRENCY" = "PENDING_CONCURRENCY"
  val PENDING_DEVICE: "PENDING_DEVICE" = "PENDING_DEVICE"
  val PROCESSING: "PROCESSING" = "PROCESSING"
  val SCHEDULING: "SCHEDULING" = "SCHEDULING"
  val PREPARING: "PREPARING" = "PREPARING"
  val RUNNING: "RUNNING" = "RUNNING"
  val COMPLETED: "COMPLETED" = "COMPLETED"
  val STOPPING: "STOPPING" = "STOPPING"

  @inline def values = js.Array[ExecutionStatus](PENDING, PENDING_CONCURRENCY, PENDING_DEVICE, PROCESSING, SCHEDULING, PREPARING, RUNNING, COMPLETED, STOPPING)
}

type InstanceStatus = "IN_USE" | "PREPARING" | "AVAILABLE" | "NOT_AVAILABLE"
object InstanceStatus {
  val IN_USE: "IN_USE" = "IN_USE"
  val PREPARING: "PREPARING" = "PREPARING"
  val AVAILABLE: "AVAILABLE" = "AVAILABLE"
  val NOT_AVAILABLE: "NOT_AVAILABLE" = "NOT_AVAILABLE"

  @inline def values = js.Array[InstanceStatus](IN_USE, PREPARING, AVAILABLE, NOT_AVAILABLE)
}

type InteractionMode = "INTERACTIVE" | "NO_VIDEO" | "VIDEO_ONLY"
object InteractionMode {
  val INTERACTIVE: "INTERACTIVE" = "INTERACTIVE"
  val NO_VIDEO: "NO_VIDEO" = "NO_VIDEO"
  val VIDEO_ONLY: "VIDEO_ONLY" = "VIDEO_ONLY"

  @inline def values = js.Array[InteractionMode](INTERACTIVE, NO_VIDEO, VIDEO_ONLY)
}

type NetworkProfileType = "CURATED" | "PRIVATE"
object NetworkProfileType {
  val CURATED: "CURATED" = "CURATED"
  val PRIVATE: "PRIVATE" = "PRIVATE"

  @inline def values = js.Array[NetworkProfileType](CURATED, PRIVATE)
}

type OfferingTransactionType = "PURCHASE" | "RENEW" | "SYSTEM"
object OfferingTransactionType {
  val PURCHASE: "PURCHASE" = "PURCHASE"
  val RENEW: "RENEW" = "RENEW"
  val SYSTEM: "SYSTEM" = "SYSTEM"

  @inline def values = js.Array[OfferingTransactionType](PURCHASE, RENEW, SYSTEM)
}

type OfferingType = "RECURRING"
object OfferingType {
  val RECURRING: "RECURRING" = "RECURRING"

  @inline def values = js.Array[OfferingType](RECURRING)
}

type RecurringChargeFrequency = "MONTHLY"
object RecurringChargeFrequency {
  val MONTHLY: "MONTHLY" = "MONTHLY"

  @inline def values = js.Array[RecurringChargeFrequency](MONTHLY)
}

type RuleOperator = "EQUALS" | "LESS_THAN" | "LESS_THAN_OR_EQUALS" | "GREATER_THAN" | "GREATER_THAN_OR_EQUALS" | "IN" | "NOT_IN" | "CONTAINS"
object RuleOperator {
  val EQUALS: "EQUALS" = "EQUALS"
  val LESS_THAN: "LESS_THAN" = "LESS_THAN"
  val LESS_THAN_OR_EQUALS: "LESS_THAN_OR_EQUALS" = "LESS_THAN_OR_EQUALS"
  val GREATER_THAN: "GREATER_THAN" = "GREATER_THAN"
  val GREATER_THAN_OR_EQUALS: "GREATER_THAN_OR_EQUALS" = "GREATER_THAN_OR_EQUALS"
  val IN: "IN" = "IN"
  val NOT_IN: "NOT_IN" = "NOT_IN"
  val CONTAINS: "CONTAINS" = "CONTAINS"

  @inline def values = js.Array[RuleOperator](EQUALS, LESS_THAN, LESS_THAN_OR_EQUALS, GREATER_THAN, GREATER_THAN_OR_EQUALS, IN, NOT_IN, CONTAINS)
}

type SampleType = "CPU" | "MEMORY" | "THREADS" | "RX_RATE" | "TX_RATE" | "RX" | "TX" | "NATIVE_FRAMES" | "NATIVE_FPS" | "NATIVE_MIN_DRAWTIME" | "NATIVE_AVG_DRAWTIME" | "NATIVE_MAX_DRAWTIME" | "OPENGL_FRAMES" | "OPENGL_FPS" | "OPENGL_MIN_DRAWTIME" | "OPENGL_AVG_DRAWTIME" | "OPENGL_MAX_DRAWTIME"
object SampleType {
  val CPU: "CPU" = "CPU"
  val MEMORY: "MEMORY" = "MEMORY"
  val THREADS: "THREADS" = "THREADS"
  val RX_RATE: "RX_RATE" = "RX_RATE"
  val TX_RATE: "TX_RATE" = "TX_RATE"
  val RX: "RX" = "RX"
  val TX: "TX" = "TX"
  val NATIVE_FRAMES: "NATIVE_FRAMES" = "NATIVE_FRAMES"
  val NATIVE_FPS: "NATIVE_FPS" = "NATIVE_FPS"
  val NATIVE_MIN_DRAWTIME: "NATIVE_MIN_DRAWTIME" = "NATIVE_MIN_DRAWTIME"
  val NATIVE_AVG_DRAWTIME: "NATIVE_AVG_DRAWTIME" = "NATIVE_AVG_DRAWTIME"
  val NATIVE_MAX_DRAWTIME: "NATIVE_MAX_DRAWTIME" = "NATIVE_MAX_DRAWTIME"
  val OPENGL_FRAMES: "OPENGL_FRAMES" = "OPENGL_FRAMES"
  val OPENGL_FPS: "OPENGL_FPS" = "OPENGL_FPS"
  val OPENGL_MIN_DRAWTIME: "OPENGL_MIN_DRAWTIME" = "OPENGL_MIN_DRAWTIME"
  val OPENGL_AVG_DRAWTIME: "OPENGL_AVG_DRAWTIME" = "OPENGL_AVG_DRAWTIME"
  val OPENGL_MAX_DRAWTIME: "OPENGL_MAX_DRAWTIME" = "OPENGL_MAX_DRAWTIME"

  @inline def values = js.Array[SampleType](
    CPU,
    MEMORY,
    THREADS,
    RX_RATE,
    TX_RATE,
    RX,
    TX,
    NATIVE_FRAMES,
    NATIVE_FPS,
    NATIVE_MIN_DRAWTIME,
    NATIVE_AVG_DRAWTIME,
    NATIVE_MAX_DRAWTIME,
    OPENGL_FRAMES,
    OPENGL_FPS,
    OPENGL_MIN_DRAWTIME,
    OPENGL_AVG_DRAWTIME,
    OPENGL_MAX_DRAWTIME
  )
}

type TestGridSessionArtifactCategory = "VIDEO" | "LOG"
object TestGridSessionArtifactCategory {
  val VIDEO: "VIDEO" = "VIDEO"
  val LOG: "LOG" = "LOG"

  @inline def values = js.Array[TestGridSessionArtifactCategory](VIDEO, LOG)
}

type TestGridSessionArtifactType = "UNKNOWN" | "VIDEO" | "SELENIUM_LOG"
object TestGridSessionArtifactType {
  val UNKNOWN: "UNKNOWN" = "UNKNOWN"
  val VIDEO: "VIDEO" = "VIDEO"
  val SELENIUM_LOG: "SELENIUM_LOG" = "SELENIUM_LOG"

  @inline def values = js.Array[TestGridSessionArtifactType](UNKNOWN, VIDEO, SELENIUM_LOG)
}

type TestGridSessionStatus = "ACTIVE" | "CLOSED" | "ERRORED"
object TestGridSessionStatus {
  val ACTIVE: "ACTIVE" = "ACTIVE"
  val CLOSED: "CLOSED" = "CLOSED"
  val ERRORED: "ERRORED" = "ERRORED"

  @inline def values = js.Array[TestGridSessionStatus](ACTIVE, CLOSED, ERRORED)
}

type TestType = "BUILTIN_FUZZ" | "BUILTIN_EXPLORER" | "WEB_PERFORMANCE_PROFILE" | "APPIUM_JAVA_JUNIT" | "APPIUM_JAVA_TESTNG" | "APPIUM_PYTHON" | "APPIUM_NODE" | "APPIUM_RUBY" | "APPIUM_WEB_JAVA_JUNIT" | "APPIUM_WEB_JAVA_TESTNG" | "APPIUM_WEB_PYTHON" | "APPIUM_WEB_NODE" | "APPIUM_WEB_RUBY" | "CALABASH" | "INSTRUMENTATION" | "UIAUTOMATION" | "UIAUTOMATOR" | "XCTEST" | "XCTEST_UI" | "REMOTE_ACCESS_RECORD" | "REMOTE_ACCESS_REPLAY"
object TestType {
  val BUILTIN_FUZZ: "BUILTIN_FUZZ" = "BUILTIN_FUZZ"
  val BUILTIN_EXPLORER: "BUILTIN_EXPLORER" = "BUILTIN_EXPLORER"
  val WEB_PERFORMANCE_PROFILE: "WEB_PERFORMANCE_PROFILE" = "WEB_PERFORMANCE_PROFILE"
  val APPIUM_JAVA_JUNIT: "APPIUM_JAVA_JUNIT" = "APPIUM_JAVA_JUNIT"
  val APPIUM_JAVA_TESTNG: "APPIUM_JAVA_TESTNG" = "APPIUM_JAVA_TESTNG"
  val APPIUM_PYTHON: "APPIUM_PYTHON" = "APPIUM_PYTHON"
  val APPIUM_NODE: "APPIUM_NODE" = "APPIUM_NODE"
  val APPIUM_RUBY: "APPIUM_RUBY" = "APPIUM_RUBY"
  val APPIUM_WEB_JAVA_JUNIT: "APPIUM_WEB_JAVA_JUNIT" = "APPIUM_WEB_JAVA_JUNIT"
  val APPIUM_WEB_JAVA_TESTNG: "APPIUM_WEB_JAVA_TESTNG" = "APPIUM_WEB_JAVA_TESTNG"
  val APPIUM_WEB_PYTHON: "APPIUM_WEB_PYTHON" = "APPIUM_WEB_PYTHON"
  val APPIUM_WEB_NODE: "APPIUM_WEB_NODE" = "APPIUM_WEB_NODE"
  val APPIUM_WEB_RUBY: "APPIUM_WEB_RUBY" = "APPIUM_WEB_RUBY"
  val CALABASH: "CALABASH" = "CALABASH"
  val INSTRUMENTATION: "INSTRUMENTATION" = "INSTRUMENTATION"
  val UIAUTOMATION: "UIAUTOMATION" = "UIAUTOMATION"
  val UIAUTOMATOR: "UIAUTOMATOR" = "UIAUTOMATOR"
  val XCTEST: "XCTEST" = "XCTEST"
  val XCTEST_UI: "XCTEST_UI" = "XCTEST_UI"
  val REMOTE_ACCESS_RECORD: "REMOTE_ACCESS_RECORD" = "REMOTE_ACCESS_RECORD"
  val REMOTE_ACCESS_REPLAY: "REMOTE_ACCESS_REPLAY" = "REMOTE_ACCESS_REPLAY"

  @inline def values = js.Array[TestType](
    BUILTIN_FUZZ,
    BUILTIN_EXPLORER,
    WEB_PERFORMANCE_PROFILE,
    APPIUM_JAVA_JUNIT,
    APPIUM_JAVA_TESTNG,
    APPIUM_PYTHON,
    APPIUM_NODE,
    APPIUM_RUBY,
    APPIUM_WEB_JAVA_JUNIT,
    APPIUM_WEB_JAVA_TESTNG,
    APPIUM_WEB_PYTHON,
    APPIUM_WEB_NODE,
    APPIUM_WEB_RUBY,
    CALABASH,
    INSTRUMENTATION,
    UIAUTOMATION,
    UIAUTOMATOR,
    XCTEST,
    XCTEST_UI,
    REMOTE_ACCESS_RECORD,
    REMOTE_ACCESS_REPLAY
  )
}

type UploadCategory = "CURATED" | "PRIVATE"
object UploadCategory {
  val CURATED: "CURATED" = "CURATED"
  val PRIVATE: "PRIVATE" = "PRIVATE"

  @inline def values = js.Array[UploadCategory](CURATED, PRIVATE)
}

type UploadStatus = "INITIALIZED" | "PROCESSING" | "SUCCEEDED" | "FAILED"
object UploadStatus {
  val INITIALIZED: "INITIALIZED" = "INITIALIZED"
  val PROCESSING: "PROCESSING" = "PROCESSING"
  val SUCCEEDED: "SUCCEEDED" = "SUCCEEDED"
  val FAILED: "FAILED" = "FAILED"

  @inline def values = js.Array[UploadStatus](INITIALIZED, PROCESSING, SUCCEEDED, FAILED)
}

type UploadType = "ANDROID_APP" | "IOS_APP" | "WEB_APP" | "EXTERNAL_DATA" | "APPIUM_JAVA_JUNIT_TEST_PACKAGE" | "APPIUM_JAVA_TESTNG_TEST_PACKAGE" | "APPIUM_PYTHON_TEST_PACKAGE" | "APPIUM_NODE_TEST_PACKAGE" | "APPIUM_RUBY_TEST_PACKAGE" | "APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE" | "APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE" | "APPIUM_WEB_PYTHON_TEST_PACKAGE" | "APPIUM_WEB_NODE_TEST_PACKAGE" | "APPIUM_WEB_RUBY_TEST_PACKAGE" | "CALABASH_TEST_PACKAGE" | "INSTRUMENTATION_TEST_PACKAGE" | "UIAUTOMATION_TEST_PACKAGE" | "UIAUTOMATOR_TEST_PACKAGE" | "XCTEST_TEST_PACKAGE" | "XCTEST_UI_TEST_PACKAGE" | "APPIUM_JAVA_JUNIT_TEST_SPEC" | "APPIUM_JAVA_TESTNG_TEST_SPEC" | "APPIUM_PYTHON_TEST_SPEC" | "APPIUM_NODE_TEST_SPEC" | "APPIUM_RUBY_TEST_SPEC" | "APPIUM_WEB_JAVA_JUNIT_TEST_SPEC" | "APPIUM_WEB_JAVA_TESTNG_TEST_SPEC" | "APPIUM_WEB_PYTHON_TEST_SPEC" | "APPIUM_WEB_NODE_TEST_SPEC" | "APPIUM_WEB_RUBY_TEST_SPEC" | "INSTRUMENTATION_TEST_SPEC" | "XCTEST_UI_TEST_SPEC"
object UploadType {
  val ANDROID_APP: "ANDROID_APP" = "ANDROID_APP"
  val IOS_APP: "IOS_APP" = "IOS_APP"
  val WEB_APP: "WEB_APP" = "WEB_APP"
  val EXTERNAL_DATA: "EXTERNAL_DATA" = "EXTERNAL_DATA"
  val APPIUM_JAVA_JUNIT_TEST_PACKAGE: "APPIUM_JAVA_JUNIT_TEST_PACKAGE" = "APPIUM_JAVA_JUNIT_TEST_PACKAGE"
  val APPIUM_JAVA_TESTNG_TEST_PACKAGE: "APPIUM_JAVA_TESTNG_TEST_PACKAGE" = "APPIUM_JAVA_TESTNG_TEST_PACKAGE"
  val APPIUM_PYTHON_TEST_PACKAGE: "APPIUM_PYTHON_TEST_PACKAGE" = "APPIUM_PYTHON_TEST_PACKAGE"
  val APPIUM_NODE_TEST_PACKAGE: "APPIUM_NODE_TEST_PACKAGE" = "APPIUM_NODE_TEST_PACKAGE"
  val APPIUM_RUBY_TEST_PACKAGE: "APPIUM_RUBY_TEST_PACKAGE" = "APPIUM_RUBY_TEST_PACKAGE"
  val APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE: "APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE" = "APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE"
  val APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE: "APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE" = "APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE"
  val APPIUM_WEB_PYTHON_TEST_PACKAGE: "APPIUM_WEB_PYTHON_TEST_PACKAGE" = "APPIUM_WEB_PYTHON_TEST_PACKAGE"
  val APPIUM_WEB_NODE_TEST_PACKAGE: "APPIUM_WEB_NODE_TEST_PACKAGE" = "APPIUM_WEB_NODE_TEST_PACKAGE"
  val APPIUM_WEB_RUBY_TEST_PACKAGE: "APPIUM_WEB_RUBY_TEST_PACKAGE" = "APPIUM_WEB_RUBY_TEST_PACKAGE"
  val CALABASH_TEST_PACKAGE: "CALABASH_TEST_PACKAGE" = "CALABASH_TEST_PACKAGE"
  val INSTRUMENTATION_TEST_PACKAGE: "INSTRUMENTATION_TEST_PACKAGE" = "INSTRUMENTATION_TEST_PACKAGE"
  val UIAUTOMATION_TEST_PACKAGE: "UIAUTOMATION_TEST_PACKAGE" = "UIAUTOMATION_TEST_PACKAGE"
  val UIAUTOMATOR_TEST_PACKAGE: "UIAUTOMATOR_TEST_PACKAGE" = "UIAUTOMATOR_TEST_PACKAGE"
  val XCTEST_TEST_PACKAGE: "XCTEST_TEST_PACKAGE" = "XCTEST_TEST_PACKAGE"
  val XCTEST_UI_TEST_PACKAGE: "XCTEST_UI_TEST_PACKAGE" = "XCTEST_UI_TEST_PACKAGE"
  val APPIUM_JAVA_JUNIT_TEST_SPEC: "APPIUM_JAVA_JUNIT_TEST_SPEC" = "APPIUM_JAVA_JUNIT_TEST_SPEC"
  val APPIUM_JAVA_TESTNG_TEST_SPEC: "APPIUM_JAVA_TESTNG_TEST_SPEC" = "APPIUM_JAVA_TESTNG_TEST_SPEC"
  val APPIUM_PYTHON_TEST_SPEC: "APPIUM_PYTHON_TEST_SPEC" = "APPIUM_PYTHON_TEST_SPEC"
  val APPIUM_NODE_TEST_SPEC: "APPIUM_NODE_TEST_SPEC" = "APPIUM_NODE_TEST_SPEC"
  val APPIUM_RUBY_TEST_SPEC: "APPIUM_RUBY_TEST_SPEC" = "APPIUM_RUBY_TEST_SPEC"
  val APPIUM_WEB_JAVA_JUNIT_TEST_SPEC: "APPIUM_WEB_JAVA_JUNIT_TEST_SPEC" = "APPIUM_WEB_JAVA_JUNIT_TEST_SPEC"
  val APPIUM_WEB_JAVA_TESTNG_TEST_SPEC: "APPIUM_WEB_JAVA_TESTNG_TEST_SPEC" = "APPIUM_WEB_JAVA_TESTNG_TEST_SPEC"
  val APPIUM_WEB_PYTHON_TEST_SPEC: "APPIUM_WEB_PYTHON_TEST_SPEC" = "APPIUM_WEB_PYTHON_TEST_SPEC"
  val APPIUM_WEB_NODE_TEST_SPEC: "APPIUM_WEB_NODE_TEST_SPEC" = "APPIUM_WEB_NODE_TEST_SPEC"
  val APPIUM_WEB_RUBY_TEST_SPEC: "APPIUM_WEB_RUBY_TEST_SPEC" = "APPIUM_WEB_RUBY_TEST_SPEC"
  val INSTRUMENTATION_TEST_SPEC: "INSTRUMENTATION_TEST_SPEC" = "INSTRUMENTATION_TEST_SPEC"
  val XCTEST_UI_TEST_SPEC: "XCTEST_UI_TEST_SPEC" = "XCTEST_UI_TEST_SPEC"

  @inline def values = js.Array[UploadType](
    ANDROID_APP,
    IOS_APP,
    WEB_APP,
    EXTERNAL_DATA,
    APPIUM_JAVA_JUNIT_TEST_PACKAGE,
    APPIUM_JAVA_TESTNG_TEST_PACKAGE,
    APPIUM_PYTHON_TEST_PACKAGE,
    APPIUM_NODE_TEST_PACKAGE,
    APPIUM_RUBY_TEST_PACKAGE,
    APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE,
    APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE,
    APPIUM_WEB_PYTHON_TEST_PACKAGE,
    APPIUM_WEB_NODE_TEST_PACKAGE,
    APPIUM_WEB_RUBY_TEST_PACKAGE,
    CALABASH_TEST_PACKAGE,
    INSTRUMENTATION_TEST_PACKAGE,
    UIAUTOMATION_TEST_PACKAGE,
    UIAUTOMATOR_TEST_PACKAGE,
    XCTEST_TEST_PACKAGE,
    XCTEST_UI_TEST_PACKAGE,
    APPIUM_JAVA_JUNIT_TEST_SPEC,
    APPIUM_JAVA_TESTNG_TEST_SPEC,
    APPIUM_PYTHON_TEST_SPEC,
    APPIUM_NODE_TEST_SPEC,
    APPIUM_RUBY_TEST_SPEC,
    APPIUM_WEB_JAVA_JUNIT_TEST_SPEC,
    APPIUM_WEB_JAVA_TESTNG_TEST_SPEC,
    APPIUM_WEB_PYTHON_TEST_SPEC,
    APPIUM_WEB_NODE_TEST_SPEC,
    APPIUM_WEB_RUBY_TEST_SPEC,
    INSTRUMENTATION_TEST_SPEC,
    XCTEST_UI_TEST_SPEC
  )
}
