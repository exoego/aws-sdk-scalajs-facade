package facade.amazonaws.services.appstream

import scalajs._

type AccessEndpointType = "STREAMING"
object AccessEndpointType {
  val STREAMING: "STREAMING" = "STREAMING"

  @inline def values = js.Array[AccessEndpointType](STREAMING)
}

type Action = "CLIPBOARD_COPY_FROM_LOCAL_DEVICE" | "CLIPBOARD_COPY_TO_LOCAL_DEVICE" | "FILE_UPLOAD" | "FILE_DOWNLOAD" | "PRINTING_TO_LOCAL_DEVICE" | "DOMAIN_PASSWORD_SIGNIN" | "DOMAIN_SMART_CARD_SIGNIN"
object Action {
  val CLIPBOARD_COPY_FROM_LOCAL_DEVICE: "CLIPBOARD_COPY_FROM_LOCAL_DEVICE" = "CLIPBOARD_COPY_FROM_LOCAL_DEVICE"
  val CLIPBOARD_COPY_TO_LOCAL_DEVICE: "CLIPBOARD_COPY_TO_LOCAL_DEVICE" = "CLIPBOARD_COPY_TO_LOCAL_DEVICE"
  val FILE_UPLOAD: "FILE_UPLOAD" = "FILE_UPLOAD"
  val FILE_DOWNLOAD: "FILE_DOWNLOAD" = "FILE_DOWNLOAD"
  val PRINTING_TO_LOCAL_DEVICE: "PRINTING_TO_LOCAL_DEVICE" = "PRINTING_TO_LOCAL_DEVICE"
  val DOMAIN_PASSWORD_SIGNIN: "DOMAIN_PASSWORD_SIGNIN" = "DOMAIN_PASSWORD_SIGNIN"
  val DOMAIN_SMART_CARD_SIGNIN: "DOMAIN_SMART_CARD_SIGNIN" = "DOMAIN_SMART_CARD_SIGNIN"

  @inline def values = js.Array[Action](
    CLIPBOARD_COPY_FROM_LOCAL_DEVICE,
    CLIPBOARD_COPY_TO_LOCAL_DEVICE,
    FILE_UPLOAD,
    FILE_DOWNLOAD,
    PRINTING_TO_LOCAL_DEVICE,
    DOMAIN_PASSWORD_SIGNIN,
    DOMAIN_SMART_CARD_SIGNIN
  )
}

type AuthenticationType = "API" | "SAML" | "USERPOOL"
object AuthenticationType {
  val API: "API" = "API"
  val SAML: "SAML" = "SAML"
  val USERPOOL: "USERPOOL" = "USERPOOL"

  @inline def values = js.Array[AuthenticationType](API, SAML, USERPOOL)
}

/** The fleet attribute.
  */
type FleetAttribute = "VPC_CONFIGURATION" | "VPC_CONFIGURATION_SECURITY_GROUP_IDS" | "DOMAIN_JOIN_INFO" | "IAM_ROLE_ARN"
object FleetAttribute {
  val VPC_CONFIGURATION: "VPC_CONFIGURATION" = "VPC_CONFIGURATION"
  val VPC_CONFIGURATION_SECURITY_GROUP_IDS: "VPC_CONFIGURATION_SECURITY_GROUP_IDS" = "VPC_CONFIGURATION_SECURITY_GROUP_IDS"
  val DOMAIN_JOIN_INFO: "DOMAIN_JOIN_INFO" = "DOMAIN_JOIN_INFO"
  val IAM_ROLE_ARN: "IAM_ROLE_ARN" = "IAM_ROLE_ARN"

  @inline def values = js.Array[FleetAttribute](VPC_CONFIGURATION, VPC_CONFIGURATION_SECURITY_GROUP_IDS, DOMAIN_JOIN_INFO, IAM_ROLE_ARN)
}

type FleetErrorCode = "IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION" | "IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION" | "IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION" | "NETWORK_INTERFACE_LIMIT_EXCEEDED" | "INTERNAL_SERVICE_ERROR" | "IAM_SERVICE_ROLE_IS_MISSING" | "MACHINE_ROLE_IS_MISSING" | "STS_DISABLED_IN_REGION" | "SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES" | "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION" | "SUBNET_NOT_FOUND" | "IMAGE_NOT_FOUND" | "INVALID_SUBNET_CONFIGURATION" | "SECURITY_GROUPS_NOT_FOUND" | "IGW_NOT_ATTACHED" | "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION" | "FLEET_STOPPED" | "FLEET_INSTANCE_PROVISIONING_FAILURE" | "DOMAIN_JOIN_ERROR_FILE_NOT_FOUND" | "DOMAIN_JOIN_ERROR_ACCESS_DENIED" | "DOMAIN_JOIN_ERROR_LOGON_FAILURE" | "DOMAIN_JOIN_ERROR_INVALID_PARAMETER" | "DOMAIN_JOIN_ERROR_MORE_DATA" | "DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN" | "DOMAIN_JOIN_ERROR_NOT_SUPPORTED" | "DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME" | "DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED" |
  "DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED" | "DOMAIN_JOIN_NERR_PASSWORD_EXPIRED" | "DOMAIN_JOIN_INTERNAL_SERVICE_ERROR"
object FleetErrorCode {
  val IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION: "IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION" = "IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION"
  val IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION: "IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION" = "IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION"
  val IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION: "IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION" = "IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION"
  val NETWORK_INTERFACE_LIMIT_EXCEEDED: "NETWORK_INTERFACE_LIMIT_EXCEEDED" = "NETWORK_INTERFACE_LIMIT_EXCEEDED"
  val INTERNAL_SERVICE_ERROR: "INTERNAL_SERVICE_ERROR" = "INTERNAL_SERVICE_ERROR"
  val IAM_SERVICE_ROLE_IS_MISSING: "IAM_SERVICE_ROLE_IS_MISSING" = "IAM_SERVICE_ROLE_IS_MISSING"
  val MACHINE_ROLE_IS_MISSING: "MACHINE_ROLE_IS_MISSING" = "MACHINE_ROLE_IS_MISSING"
  val STS_DISABLED_IN_REGION: "STS_DISABLED_IN_REGION" = "STS_DISABLED_IN_REGION"
  val SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES: "SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES" = "SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES"
  val IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION: "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION" = "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION"
  val SUBNET_NOT_FOUND: "SUBNET_NOT_FOUND" = "SUBNET_NOT_FOUND"
  val IMAGE_NOT_FOUND: "IMAGE_NOT_FOUND" = "IMAGE_NOT_FOUND"
  val INVALID_SUBNET_CONFIGURATION: "INVALID_SUBNET_CONFIGURATION" = "INVALID_SUBNET_CONFIGURATION"
  val SECURITY_GROUPS_NOT_FOUND: "SECURITY_GROUPS_NOT_FOUND" = "SECURITY_GROUPS_NOT_FOUND"
  val IGW_NOT_ATTACHED: "IGW_NOT_ATTACHED" = "IGW_NOT_ATTACHED"
  val IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION: "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION" = "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION"
  val FLEET_STOPPED: "FLEET_STOPPED" = "FLEET_STOPPED"
  val FLEET_INSTANCE_PROVISIONING_FAILURE: "FLEET_INSTANCE_PROVISIONING_FAILURE" = "FLEET_INSTANCE_PROVISIONING_FAILURE"
  val DOMAIN_JOIN_ERROR_FILE_NOT_FOUND: "DOMAIN_JOIN_ERROR_FILE_NOT_FOUND" = "DOMAIN_JOIN_ERROR_FILE_NOT_FOUND"
  val DOMAIN_JOIN_ERROR_ACCESS_DENIED: "DOMAIN_JOIN_ERROR_ACCESS_DENIED" = "DOMAIN_JOIN_ERROR_ACCESS_DENIED"
  val DOMAIN_JOIN_ERROR_LOGON_FAILURE: "DOMAIN_JOIN_ERROR_LOGON_FAILURE" = "DOMAIN_JOIN_ERROR_LOGON_FAILURE"
  val DOMAIN_JOIN_ERROR_INVALID_PARAMETER: "DOMAIN_JOIN_ERROR_INVALID_PARAMETER" = "DOMAIN_JOIN_ERROR_INVALID_PARAMETER"
  val DOMAIN_JOIN_ERROR_MORE_DATA: "DOMAIN_JOIN_ERROR_MORE_DATA" = "DOMAIN_JOIN_ERROR_MORE_DATA"
  val DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN: "DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN" = "DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN"
  val DOMAIN_JOIN_ERROR_NOT_SUPPORTED: "DOMAIN_JOIN_ERROR_NOT_SUPPORTED" = "DOMAIN_JOIN_ERROR_NOT_SUPPORTED"
  val DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME: "DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME" = "DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME"
  val DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED: "DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED" = "DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED"
  val DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED: "DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED" = "DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED"
  val DOMAIN_JOIN_NERR_PASSWORD_EXPIRED: "DOMAIN_JOIN_NERR_PASSWORD_EXPIRED" = "DOMAIN_JOIN_NERR_PASSWORD_EXPIRED"
  val DOMAIN_JOIN_INTERNAL_SERVICE_ERROR: "DOMAIN_JOIN_INTERNAL_SERVICE_ERROR" = "DOMAIN_JOIN_INTERNAL_SERVICE_ERROR"

  @inline def values = js.Array[FleetErrorCode](
    IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION,
    IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION,
    IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION,
    NETWORK_INTERFACE_LIMIT_EXCEEDED,
    INTERNAL_SERVICE_ERROR,
    IAM_SERVICE_ROLE_IS_MISSING,
    MACHINE_ROLE_IS_MISSING,
    STS_DISABLED_IN_REGION,
    SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES,
    IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION,
    SUBNET_NOT_FOUND,
    IMAGE_NOT_FOUND,
    INVALID_SUBNET_CONFIGURATION,
    SECURITY_GROUPS_NOT_FOUND,
    IGW_NOT_ATTACHED,
    IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION,
    FLEET_STOPPED,
    FLEET_INSTANCE_PROVISIONING_FAILURE,
    DOMAIN_JOIN_ERROR_FILE_NOT_FOUND,
    DOMAIN_JOIN_ERROR_ACCESS_DENIED,
    DOMAIN_JOIN_ERROR_LOGON_FAILURE,
    DOMAIN_JOIN_ERROR_INVALID_PARAMETER,
    DOMAIN_JOIN_ERROR_MORE_DATA,
    DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN,
    DOMAIN_JOIN_ERROR_NOT_SUPPORTED,
    DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME,
    DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED,
    DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED,
    DOMAIN_JOIN_NERR_PASSWORD_EXPIRED,
    DOMAIN_JOIN_INTERNAL_SERVICE_ERROR
  )
}

type FleetState = "STARTING" | "RUNNING" | "STOPPING" | "STOPPED"
object FleetState {
  val STARTING: "STARTING" = "STARTING"
  val RUNNING: "RUNNING" = "RUNNING"
  val STOPPING: "STOPPING" = "STOPPING"
  val STOPPED: "STOPPED" = "STOPPED"

  @inline def values = js.Array[FleetState](STARTING, RUNNING, STOPPING, STOPPED)
}

type FleetType = "ALWAYS_ON" | "ON_DEMAND"
object FleetType {
  val ALWAYS_ON: "ALWAYS_ON" = "ALWAYS_ON"
  val ON_DEMAND: "ON_DEMAND" = "ON_DEMAND"

  @inline def values = js.Array[FleetType](ALWAYS_ON, ON_DEMAND)
}

type ImageBuilderState = "PENDING" | "UPDATING_AGENT" | "RUNNING" | "STOPPING" | "STOPPED" | "REBOOTING" | "SNAPSHOTTING" | "DELETING" | "FAILED" | "UPDATING" | "PENDING_QUALIFICATION"
object ImageBuilderState {
  val PENDING: "PENDING" = "PENDING"
  val UPDATING_AGENT: "UPDATING_AGENT" = "UPDATING_AGENT"
  val RUNNING: "RUNNING" = "RUNNING"
  val STOPPING: "STOPPING" = "STOPPING"
  val STOPPED: "STOPPED" = "STOPPED"
  val REBOOTING: "REBOOTING" = "REBOOTING"
  val SNAPSHOTTING: "SNAPSHOTTING" = "SNAPSHOTTING"
  val DELETING: "DELETING" = "DELETING"
  val FAILED: "FAILED" = "FAILED"
  val UPDATING: "UPDATING" = "UPDATING"
  val PENDING_QUALIFICATION: "PENDING_QUALIFICATION" = "PENDING_QUALIFICATION"

  @inline def values = js.Array[ImageBuilderState](PENDING, UPDATING_AGENT, RUNNING, STOPPING, STOPPED, REBOOTING, SNAPSHOTTING, DELETING, FAILED, UPDATING, PENDING_QUALIFICATION)
}

type ImageBuilderStateChangeReasonCode = "INTERNAL_ERROR" | "IMAGE_UNAVAILABLE"
object ImageBuilderStateChangeReasonCode {
  val INTERNAL_ERROR: "INTERNAL_ERROR" = "INTERNAL_ERROR"
  val IMAGE_UNAVAILABLE: "IMAGE_UNAVAILABLE" = "IMAGE_UNAVAILABLE"

  @inline def values = js.Array[ImageBuilderStateChangeReasonCode](INTERNAL_ERROR, IMAGE_UNAVAILABLE)
}

type ImageState = "PENDING" | "AVAILABLE" | "FAILED" | "COPYING" | "DELETING" | "CREATING" | "IMPORTING"
object ImageState {
  val PENDING: "PENDING" = "PENDING"
  val AVAILABLE: "AVAILABLE" = "AVAILABLE"
  val FAILED: "FAILED" = "FAILED"
  val COPYING: "COPYING" = "COPYING"
  val DELETING: "DELETING" = "DELETING"
  val CREATING: "CREATING" = "CREATING"
  val IMPORTING: "IMPORTING" = "IMPORTING"

  @inline def values = js.Array[ImageState](PENDING, AVAILABLE, FAILED, COPYING, DELETING, CREATING, IMPORTING)
}

type ImageStateChangeReasonCode = "INTERNAL_ERROR" | "IMAGE_BUILDER_NOT_AVAILABLE" | "IMAGE_COPY_FAILURE"
object ImageStateChangeReasonCode {
  val INTERNAL_ERROR: "INTERNAL_ERROR" = "INTERNAL_ERROR"
  val IMAGE_BUILDER_NOT_AVAILABLE: "IMAGE_BUILDER_NOT_AVAILABLE" = "IMAGE_BUILDER_NOT_AVAILABLE"
  val IMAGE_COPY_FAILURE: "IMAGE_COPY_FAILURE" = "IMAGE_COPY_FAILURE"

  @inline def values = js.Array[ImageStateChangeReasonCode](INTERNAL_ERROR, IMAGE_BUILDER_NOT_AVAILABLE, IMAGE_COPY_FAILURE)
}

type MessageAction = "SUPPRESS" | "RESEND"
object MessageAction {
  val SUPPRESS: "SUPPRESS" = "SUPPRESS"
  val RESEND: "RESEND" = "RESEND"

  @inline def values = js.Array[MessageAction](SUPPRESS, RESEND)
}

type Permission = "ENABLED" | "DISABLED"
object Permission {
  val ENABLED: "ENABLED" = "ENABLED"
  val DISABLED: "DISABLED" = "DISABLED"

  @inline def values = js.Array[Permission](ENABLED, DISABLED)
}

type PlatformType = "WINDOWS" | "WINDOWS_SERVER_2016" | "WINDOWS_SERVER_2019"
object PlatformType {
  val WINDOWS: "WINDOWS" = "WINDOWS"
  val WINDOWS_SERVER_2016: "WINDOWS_SERVER_2016" = "WINDOWS_SERVER_2016"
  val WINDOWS_SERVER_2019: "WINDOWS_SERVER_2019" = "WINDOWS_SERVER_2019"

  @inline def values = js.Array[PlatformType](WINDOWS, WINDOWS_SERVER_2016, WINDOWS_SERVER_2019)
}

type SessionConnectionState = "CONNECTED" | "NOT_CONNECTED"
object SessionConnectionState {
  val CONNECTED: "CONNECTED" = "CONNECTED"
  val NOT_CONNECTED: "NOT_CONNECTED" = "NOT_CONNECTED"

  @inline def values = js.Array[SessionConnectionState](CONNECTED, NOT_CONNECTED)
}

/** Possible values for the state of a streaming session.
  */
type SessionState = "ACTIVE" | "PENDING" | "EXPIRED"
object SessionState {
  val ACTIVE: "ACTIVE" = "ACTIVE"
  val PENDING: "PENDING" = "PENDING"
  val EXPIRED: "EXPIRED" = "EXPIRED"

  @inline def values = js.Array[SessionState](ACTIVE, PENDING, EXPIRED)
}

type StackAttribute = "STORAGE_CONNECTORS" | "STORAGE_CONNECTOR_HOMEFOLDERS" | "STORAGE_CONNECTOR_GOOGLE_DRIVE" | "STORAGE_CONNECTOR_ONE_DRIVE" | "REDIRECT_URL" | "FEEDBACK_URL" | "THEME_NAME" | "USER_SETTINGS" | "EMBED_HOST_DOMAINS" | "IAM_ROLE_ARN" | "ACCESS_ENDPOINTS"
object StackAttribute {
  val STORAGE_CONNECTORS: "STORAGE_CONNECTORS" = "STORAGE_CONNECTORS"
  val STORAGE_CONNECTOR_HOMEFOLDERS: "STORAGE_CONNECTOR_HOMEFOLDERS" = "STORAGE_CONNECTOR_HOMEFOLDERS"
  val STORAGE_CONNECTOR_GOOGLE_DRIVE: "STORAGE_CONNECTOR_GOOGLE_DRIVE" = "STORAGE_CONNECTOR_GOOGLE_DRIVE"
  val STORAGE_CONNECTOR_ONE_DRIVE: "STORAGE_CONNECTOR_ONE_DRIVE" = "STORAGE_CONNECTOR_ONE_DRIVE"
  val REDIRECT_URL: "REDIRECT_URL" = "REDIRECT_URL"
  val FEEDBACK_URL: "FEEDBACK_URL" = "FEEDBACK_URL"
  val THEME_NAME: "THEME_NAME" = "THEME_NAME"
  val USER_SETTINGS: "USER_SETTINGS" = "USER_SETTINGS"
  val EMBED_HOST_DOMAINS: "EMBED_HOST_DOMAINS" = "EMBED_HOST_DOMAINS"
  val IAM_ROLE_ARN: "IAM_ROLE_ARN" = "IAM_ROLE_ARN"
  val ACCESS_ENDPOINTS: "ACCESS_ENDPOINTS" = "ACCESS_ENDPOINTS"

  @inline def values = js.Array[StackAttribute](
    STORAGE_CONNECTORS,
    STORAGE_CONNECTOR_HOMEFOLDERS,
    STORAGE_CONNECTOR_GOOGLE_DRIVE,
    STORAGE_CONNECTOR_ONE_DRIVE,
    REDIRECT_URL,
    FEEDBACK_URL,
    THEME_NAME,
    USER_SETTINGS,
    EMBED_HOST_DOMAINS,
    IAM_ROLE_ARN,
    ACCESS_ENDPOINTS
  )
}

type StackErrorCode = "STORAGE_CONNECTOR_ERROR" | "INTERNAL_SERVICE_ERROR"
object StackErrorCode {
  val STORAGE_CONNECTOR_ERROR: "STORAGE_CONNECTOR_ERROR" = "STORAGE_CONNECTOR_ERROR"
  val INTERNAL_SERVICE_ERROR: "INTERNAL_SERVICE_ERROR" = "INTERNAL_SERVICE_ERROR"

  @inline def values = js.Array[StackErrorCode](STORAGE_CONNECTOR_ERROR, INTERNAL_SERVICE_ERROR)
}

/** The type of storage connector.
  */
type StorageConnectorType = "HOMEFOLDERS" | "GOOGLE_DRIVE" | "ONE_DRIVE"
object StorageConnectorType {
  val HOMEFOLDERS: "HOMEFOLDERS" = "HOMEFOLDERS"
  val GOOGLE_DRIVE: "GOOGLE_DRIVE" = "GOOGLE_DRIVE"
  val ONE_DRIVE: "ONE_DRIVE" = "ONE_DRIVE"

  @inline def values = js.Array[StorageConnectorType](HOMEFOLDERS, GOOGLE_DRIVE, ONE_DRIVE)
}

type StreamView = "APP" | "DESKTOP"
object StreamView {
  val APP: "APP" = "APP"
  val DESKTOP: "DESKTOP" = "DESKTOP"

  @inline def values = js.Array[StreamView](APP, DESKTOP)
}

type UsageReportExecutionErrorCode = "RESOURCE_NOT_FOUND" | "ACCESS_DENIED" | "INTERNAL_SERVICE_ERROR"
object UsageReportExecutionErrorCode {
  val RESOURCE_NOT_FOUND: "RESOURCE_NOT_FOUND" = "RESOURCE_NOT_FOUND"
  val ACCESS_DENIED: "ACCESS_DENIED" = "ACCESS_DENIED"
  val INTERNAL_SERVICE_ERROR: "INTERNAL_SERVICE_ERROR" = "INTERNAL_SERVICE_ERROR"

  @inline def values = js.Array[UsageReportExecutionErrorCode](RESOURCE_NOT_FOUND, ACCESS_DENIED, INTERNAL_SERVICE_ERROR)
}

type UsageReportSchedule = "DAILY"
object UsageReportSchedule {
  val DAILY: "DAILY" = "DAILY"

  @inline def values = js.Array[UsageReportSchedule](DAILY)
}

type UserStackAssociationErrorCode = "STACK_NOT_FOUND" | "USER_NAME_NOT_FOUND" | "DIRECTORY_NOT_FOUND" | "INTERNAL_ERROR"
object UserStackAssociationErrorCode {
  val STACK_NOT_FOUND: "STACK_NOT_FOUND" = "STACK_NOT_FOUND"
  val USER_NAME_NOT_FOUND: "USER_NAME_NOT_FOUND" = "USER_NAME_NOT_FOUND"
  val DIRECTORY_NOT_FOUND: "DIRECTORY_NOT_FOUND" = "DIRECTORY_NOT_FOUND"
  val INTERNAL_ERROR: "INTERNAL_ERROR" = "INTERNAL_ERROR"

  @inline def values = js.Array[UserStackAssociationErrorCode](STACK_NOT_FOUND, USER_NAME_NOT_FOUND, DIRECTORY_NOT_FOUND, INTERNAL_ERROR)
}

type VisibilityType = "PUBLIC" | "PRIVATE" | "SHARED"
object VisibilityType {
  val PUBLIC: "PUBLIC" = "PUBLIC"
  val PRIVATE: "PRIVATE" = "PRIVATE"
  val SHARED: "SHARED" = "SHARED"

  @inline def values = js.Array[VisibilityType](PUBLIC, PRIVATE, SHARED)
}
