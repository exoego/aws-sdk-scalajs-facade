package facade.amazonaws.services.iotthingsgraph

import scalajs._

type DefinitionLanguage = "GRAPHQL"
object DefinitionLanguage {
  inline val GRAPHQL: "GRAPHQL" = "GRAPHQL"

  inline def values: js.Array[DefinitionLanguage] = js.Array(GRAPHQL)
}

type DeploymentTarget = "GREENGRASS" | "CLOUD"
object DeploymentTarget {
  inline val GREENGRASS: "GREENGRASS" = "GREENGRASS"
  inline val CLOUD: "CLOUD" = "CLOUD"

  inline def values: js.Array[DeploymentTarget] = js.Array(GREENGRASS, CLOUD)
}

type EntityFilterName = "NAME" | "NAMESPACE" | "SEMANTIC_TYPE_PATH" | "REFERENCED_ENTITY_ID"
object EntityFilterName {
  inline val NAME: "NAME" = "NAME"
  inline val NAMESPACE: "NAMESPACE" = "NAMESPACE"
  inline val SEMANTIC_TYPE_PATH: "SEMANTIC_TYPE_PATH" = "SEMANTIC_TYPE_PATH"
  inline val REFERENCED_ENTITY_ID: "REFERENCED_ENTITY_ID" = "REFERENCED_ENTITY_ID"

  inline def values: js.Array[EntityFilterName] = js.Array(NAME, NAMESPACE, SEMANTIC_TYPE_PATH, REFERENCED_ENTITY_ID)
}

type EntityType = "DEVICE" | "SERVICE" | "DEVICE_MODEL" | "CAPABILITY" | "STATE" | "ACTION" | "EVENT" | "PROPERTY" | "MAPPING" | "ENUM"
object EntityType {
  inline val DEVICE: "DEVICE" = "DEVICE"
  inline val SERVICE: "SERVICE" = "SERVICE"
  inline val DEVICE_MODEL: "DEVICE_MODEL" = "DEVICE_MODEL"
  inline val CAPABILITY: "CAPABILITY" = "CAPABILITY"
  inline val STATE: "STATE" = "STATE"
  inline val ACTION: "ACTION" = "ACTION"
  inline val EVENT: "EVENT" = "EVENT"
  inline val PROPERTY: "PROPERTY" = "PROPERTY"
  inline val MAPPING: "MAPPING" = "MAPPING"
  inline val ENUM: "ENUM" = "ENUM"

  inline def values: js.Array[EntityType] = js.Array(DEVICE, SERVICE, DEVICE_MODEL, CAPABILITY, STATE, ACTION, EVENT, PROPERTY, MAPPING, ENUM)
}

type FlowExecutionEventType = "EXECUTION_STARTED" | "EXECUTION_FAILED" | "EXECUTION_ABORTED" | "EXECUTION_SUCCEEDED" | "STEP_STARTED" | "STEP_FAILED" | "STEP_SUCCEEDED" | "ACTIVITY_SCHEDULED" | "ACTIVITY_STARTED" | "ACTIVITY_FAILED" | "ACTIVITY_SUCCEEDED" | "START_FLOW_EXECUTION_TASK" | "SCHEDULE_NEXT_READY_STEPS_TASK" | "THING_ACTION_TASK" | "THING_ACTION_TASK_FAILED" | "THING_ACTION_TASK_SUCCEEDED" | "ACKNOWLEDGE_TASK_MESSAGE"
object FlowExecutionEventType {
  inline val EXECUTION_STARTED: "EXECUTION_STARTED" = "EXECUTION_STARTED"
  inline val EXECUTION_FAILED: "EXECUTION_FAILED" = "EXECUTION_FAILED"
  inline val EXECUTION_ABORTED: "EXECUTION_ABORTED" = "EXECUTION_ABORTED"
  inline val EXECUTION_SUCCEEDED: "EXECUTION_SUCCEEDED" = "EXECUTION_SUCCEEDED"
  inline val STEP_STARTED: "STEP_STARTED" = "STEP_STARTED"
  inline val STEP_FAILED: "STEP_FAILED" = "STEP_FAILED"
  inline val STEP_SUCCEEDED: "STEP_SUCCEEDED" = "STEP_SUCCEEDED"
  inline val ACTIVITY_SCHEDULED: "ACTIVITY_SCHEDULED" = "ACTIVITY_SCHEDULED"
  inline val ACTIVITY_STARTED: "ACTIVITY_STARTED" = "ACTIVITY_STARTED"
  inline val ACTIVITY_FAILED: "ACTIVITY_FAILED" = "ACTIVITY_FAILED"
  inline val ACTIVITY_SUCCEEDED: "ACTIVITY_SUCCEEDED" = "ACTIVITY_SUCCEEDED"
  inline val START_FLOW_EXECUTION_TASK: "START_FLOW_EXECUTION_TASK" = "START_FLOW_EXECUTION_TASK"
  inline val SCHEDULE_NEXT_READY_STEPS_TASK: "SCHEDULE_NEXT_READY_STEPS_TASK" = "SCHEDULE_NEXT_READY_STEPS_TASK"
  inline val THING_ACTION_TASK: "THING_ACTION_TASK" = "THING_ACTION_TASK"
  inline val THING_ACTION_TASK_FAILED: "THING_ACTION_TASK_FAILED" = "THING_ACTION_TASK_FAILED"
  inline val THING_ACTION_TASK_SUCCEEDED: "THING_ACTION_TASK_SUCCEEDED" = "THING_ACTION_TASK_SUCCEEDED"
  inline val ACKNOWLEDGE_TASK_MESSAGE: "ACKNOWLEDGE_TASK_MESSAGE" = "ACKNOWLEDGE_TASK_MESSAGE"

  inline def values: js.Array[FlowExecutionEventType] = js.Array(
    EXECUTION_STARTED,
    EXECUTION_FAILED,
    EXECUTION_ABORTED,
    EXECUTION_SUCCEEDED,
    STEP_STARTED,
    STEP_FAILED,
    STEP_SUCCEEDED,
    ACTIVITY_SCHEDULED,
    ACTIVITY_STARTED,
    ACTIVITY_FAILED,
    ACTIVITY_SUCCEEDED,
    START_FLOW_EXECUTION_TASK,
    SCHEDULE_NEXT_READY_STEPS_TASK,
    THING_ACTION_TASK,
    THING_ACTION_TASK_FAILED,
    THING_ACTION_TASK_SUCCEEDED,
    ACKNOWLEDGE_TASK_MESSAGE
  )
}

type FlowExecutionStatus = "RUNNING" | "ABORTED" | "SUCCEEDED" | "FAILED"
object FlowExecutionStatus {
  inline val RUNNING: "RUNNING" = "RUNNING"
  inline val ABORTED: "ABORTED" = "ABORTED"
  inline val SUCCEEDED: "SUCCEEDED" = "SUCCEEDED"
  inline val FAILED: "FAILED" = "FAILED"

  inline def values: js.Array[FlowExecutionStatus] = js.Array(RUNNING, ABORTED, SUCCEEDED, FAILED)
}

type FlowTemplateFilterName = "DEVICE_MODEL_ID"
object FlowTemplateFilterName {
  inline val DEVICE_MODEL_ID: "DEVICE_MODEL_ID" = "DEVICE_MODEL_ID"

  inline def values: js.Array[FlowTemplateFilterName] = js.Array(DEVICE_MODEL_ID)
}

type NamespaceDeletionStatus = "IN_PROGRESS" | "SUCCEEDED" | "FAILED"
object NamespaceDeletionStatus {
  inline val IN_PROGRESS: "IN_PROGRESS" = "IN_PROGRESS"
  inline val SUCCEEDED: "SUCCEEDED" = "SUCCEEDED"
  inline val FAILED: "FAILED" = "FAILED"

  inline def values: js.Array[NamespaceDeletionStatus] = js.Array(IN_PROGRESS, SUCCEEDED, FAILED)
}

type NamespaceDeletionStatusErrorCodes = "VALIDATION_FAILED"
object NamespaceDeletionStatusErrorCodes {
  inline val VALIDATION_FAILED: "VALIDATION_FAILED" = "VALIDATION_FAILED"

  inline def values: js.Array[NamespaceDeletionStatusErrorCodes] = js.Array(VALIDATION_FAILED)
}

type SystemInstanceDeploymentStatus = "NOT_DEPLOYED" | "BOOTSTRAP" | "DEPLOY_IN_PROGRESS" | "DEPLOYED_IN_TARGET" | "UNDEPLOY_IN_PROGRESS" | "FAILED" | "PENDING_DELETE" | "DELETED_IN_TARGET"
object SystemInstanceDeploymentStatus {
  inline val NOT_DEPLOYED: "NOT_DEPLOYED" = "NOT_DEPLOYED"
  inline val BOOTSTRAP: "BOOTSTRAP" = "BOOTSTRAP"
  inline val DEPLOY_IN_PROGRESS: "DEPLOY_IN_PROGRESS" = "DEPLOY_IN_PROGRESS"
  inline val DEPLOYED_IN_TARGET: "DEPLOYED_IN_TARGET" = "DEPLOYED_IN_TARGET"
  inline val UNDEPLOY_IN_PROGRESS: "UNDEPLOY_IN_PROGRESS" = "UNDEPLOY_IN_PROGRESS"
  inline val FAILED: "FAILED" = "FAILED"
  inline val PENDING_DELETE: "PENDING_DELETE" = "PENDING_DELETE"
  inline val DELETED_IN_TARGET: "DELETED_IN_TARGET" = "DELETED_IN_TARGET"

  inline def values: js.Array[SystemInstanceDeploymentStatus] = js.Array(NOT_DEPLOYED, BOOTSTRAP, DEPLOY_IN_PROGRESS, DEPLOYED_IN_TARGET, UNDEPLOY_IN_PROGRESS, FAILED, PENDING_DELETE, DELETED_IN_TARGET)
}

type SystemInstanceFilterName = "SYSTEM_TEMPLATE_ID" | "STATUS" | "GREENGRASS_GROUP_NAME"
object SystemInstanceFilterName {
  inline val SYSTEM_TEMPLATE_ID: "SYSTEM_TEMPLATE_ID" = "SYSTEM_TEMPLATE_ID"
  inline val STATUS: "STATUS" = "STATUS"
  inline val GREENGRASS_GROUP_NAME: "GREENGRASS_GROUP_NAME" = "GREENGRASS_GROUP_NAME"

  inline def values: js.Array[SystemInstanceFilterName] = js.Array(SYSTEM_TEMPLATE_ID, STATUS, GREENGRASS_GROUP_NAME)
}

type SystemTemplateFilterName = "FLOW_TEMPLATE_ID"
object SystemTemplateFilterName {
  inline val FLOW_TEMPLATE_ID: "FLOW_TEMPLATE_ID" = "FLOW_TEMPLATE_ID"

  inline def values: js.Array[SystemTemplateFilterName] = js.Array(FLOW_TEMPLATE_ID)
}

type UploadStatus = "IN_PROGRESS" | "SUCCEEDED" | "FAILED"
object UploadStatus {
  inline val IN_PROGRESS: "IN_PROGRESS" = "IN_PROGRESS"
  inline val SUCCEEDED: "SUCCEEDED" = "SUCCEEDED"
  inline val FAILED: "FAILED" = "FAILED"

  inline def values: js.Array[UploadStatus] = js.Array(IN_PROGRESS, SUCCEEDED, FAILED)
}
