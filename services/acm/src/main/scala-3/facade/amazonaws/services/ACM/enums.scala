package facade.amazonaws.services.acm

import scalajs._

type CertificateStatus = "PENDING_VALIDATION" | "ISSUED" | "INACTIVE" | "EXPIRED" | "VALIDATION_TIMED_OUT" | "REVOKED" | "FAILED"
object CertificateStatus {
  val PENDING_VALIDATION: "PENDING_VALIDATION" = "PENDING_VALIDATION"
  val ISSUED: "ISSUED" = "ISSUED"
  val INACTIVE: "INACTIVE" = "INACTIVE"
  val EXPIRED: "EXPIRED" = "EXPIRED"
  val VALIDATION_TIMED_OUT: "VALIDATION_TIMED_OUT" = "VALIDATION_TIMED_OUT"
  val REVOKED: "REVOKED" = "REVOKED"
  val FAILED: "FAILED" = "FAILED"

  @inline def values = js.Array[CertificateStatus](PENDING_VALIDATION, ISSUED, INACTIVE, EXPIRED, VALIDATION_TIMED_OUT, REVOKED, FAILED)
}

type CertificateTransparencyLoggingPreference = "ENABLED" | "DISABLED"
object CertificateTransparencyLoggingPreference {
  val ENABLED: "ENABLED" = "ENABLED"
  val DISABLED: "DISABLED" = "DISABLED"

  @inline def values = js.Array[CertificateTransparencyLoggingPreference](ENABLED, DISABLED)
}

type CertificateType = "IMPORTED" | "AMAZON_ISSUED" | "PRIVATE"
object CertificateType {
  val IMPORTED: "IMPORTED" = "IMPORTED"
  val AMAZON_ISSUED: "AMAZON_ISSUED" = "AMAZON_ISSUED"
  val PRIVATE: "PRIVATE" = "PRIVATE"

  @inline def values = js.Array[CertificateType](IMPORTED, AMAZON_ISSUED, PRIVATE)
}

type DomainStatus = "PENDING_VALIDATION" | "SUCCESS" | "FAILED"
object DomainStatus {
  val PENDING_VALIDATION: "PENDING_VALIDATION" = "PENDING_VALIDATION"
  val SUCCESS: "SUCCESS" = "SUCCESS"
  val FAILED: "FAILED" = "FAILED"

  @inline def values = js.Array[DomainStatus](PENDING_VALIDATION, SUCCESS, FAILED)
}

type ExtendedKeyUsageName = "TLS_WEB_SERVER_AUTHENTICATION" | "TLS_WEB_CLIENT_AUTHENTICATION" | "CODE_SIGNING" | "EMAIL_PROTECTION" | "TIME_STAMPING" | "OCSP_SIGNING" | "IPSEC_END_SYSTEM" | "IPSEC_TUNNEL" | "IPSEC_USER" | "ANY" | "NONE" | "CUSTOM"
object ExtendedKeyUsageName {
  val TLS_WEB_SERVER_AUTHENTICATION: "TLS_WEB_SERVER_AUTHENTICATION" = "TLS_WEB_SERVER_AUTHENTICATION"
  val TLS_WEB_CLIENT_AUTHENTICATION: "TLS_WEB_CLIENT_AUTHENTICATION" = "TLS_WEB_CLIENT_AUTHENTICATION"
  val CODE_SIGNING: "CODE_SIGNING" = "CODE_SIGNING"
  val EMAIL_PROTECTION: "EMAIL_PROTECTION" = "EMAIL_PROTECTION"
  val TIME_STAMPING: "TIME_STAMPING" = "TIME_STAMPING"
  val OCSP_SIGNING: "OCSP_SIGNING" = "OCSP_SIGNING"
  val IPSEC_END_SYSTEM: "IPSEC_END_SYSTEM" = "IPSEC_END_SYSTEM"
  val IPSEC_TUNNEL: "IPSEC_TUNNEL" = "IPSEC_TUNNEL"
  val IPSEC_USER: "IPSEC_USER" = "IPSEC_USER"
  val ANY: "ANY" = "ANY"
  val NONE: "NONE" = "NONE"
  val CUSTOM: "CUSTOM" = "CUSTOM"

  @inline def values = js.Array[ExtendedKeyUsageName](
    TLS_WEB_SERVER_AUTHENTICATION,
    TLS_WEB_CLIENT_AUTHENTICATION,
    CODE_SIGNING,
    EMAIL_PROTECTION,
    TIME_STAMPING,
    OCSP_SIGNING,
    IPSEC_END_SYSTEM,
    IPSEC_TUNNEL,
    IPSEC_USER,
    ANY,
    NONE,
    CUSTOM
  )
}

type FailureReason = "NO_AVAILABLE_CONTACTS" | "ADDITIONAL_VERIFICATION_REQUIRED" | "DOMAIN_NOT_ALLOWED" | "INVALID_PUBLIC_DOMAIN" | "DOMAIN_VALIDATION_DENIED" | "CAA_ERROR" | "PCA_LIMIT_EXCEEDED" | "PCA_INVALID_ARN" | "PCA_INVALID_STATE" | "PCA_REQUEST_FAILED" | "PCA_NAME_CONSTRAINTS_VALIDATION" | "PCA_RESOURCE_NOT_FOUND" | "PCA_INVALID_ARGS" | "PCA_INVALID_DURATION" | "PCA_ACCESS_DENIED" | "SLR_NOT_FOUND" | "OTHER"
object FailureReason {
  val NO_AVAILABLE_CONTACTS: "NO_AVAILABLE_CONTACTS" = "NO_AVAILABLE_CONTACTS"
  val ADDITIONAL_VERIFICATION_REQUIRED: "ADDITIONAL_VERIFICATION_REQUIRED" = "ADDITIONAL_VERIFICATION_REQUIRED"
  val DOMAIN_NOT_ALLOWED: "DOMAIN_NOT_ALLOWED" = "DOMAIN_NOT_ALLOWED"
  val INVALID_PUBLIC_DOMAIN: "INVALID_PUBLIC_DOMAIN" = "INVALID_PUBLIC_DOMAIN"
  val DOMAIN_VALIDATION_DENIED: "DOMAIN_VALIDATION_DENIED" = "DOMAIN_VALIDATION_DENIED"
  val CAA_ERROR: "CAA_ERROR" = "CAA_ERROR"
  val PCA_LIMIT_EXCEEDED: "PCA_LIMIT_EXCEEDED" = "PCA_LIMIT_EXCEEDED"
  val PCA_INVALID_ARN: "PCA_INVALID_ARN" = "PCA_INVALID_ARN"
  val PCA_INVALID_STATE: "PCA_INVALID_STATE" = "PCA_INVALID_STATE"
  val PCA_REQUEST_FAILED: "PCA_REQUEST_FAILED" = "PCA_REQUEST_FAILED"
  val PCA_NAME_CONSTRAINTS_VALIDATION: "PCA_NAME_CONSTRAINTS_VALIDATION" = "PCA_NAME_CONSTRAINTS_VALIDATION"
  val PCA_RESOURCE_NOT_FOUND: "PCA_RESOURCE_NOT_FOUND" = "PCA_RESOURCE_NOT_FOUND"
  val PCA_INVALID_ARGS: "PCA_INVALID_ARGS" = "PCA_INVALID_ARGS"
  val PCA_INVALID_DURATION: "PCA_INVALID_DURATION" = "PCA_INVALID_DURATION"
  val PCA_ACCESS_DENIED: "PCA_ACCESS_DENIED" = "PCA_ACCESS_DENIED"
  val SLR_NOT_FOUND: "SLR_NOT_FOUND" = "SLR_NOT_FOUND"
  val OTHER: "OTHER" = "OTHER"

  @inline def values = js.Array[FailureReason](
    NO_AVAILABLE_CONTACTS,
    ADDITIONAL_VERIFICATION_REQUIRED,
    DOMAIN_NOT_ALLOWED,
    INVALID_PUBLIC_DOMAIN,
    DOMAIN_VALIDATION_DENIED,
    CAA_ERROR,
    PCA_LIMIT_EXCEEDED,
    PCA_INVALID_ARN,
    PCA_INVALID_STATE,
    PCA_REQUEST_FAILED,
    PCA_NAME_CONSTRAINTS_VALIDATION,
    PCA_RESOURCE_NOT_FOUND,
    PCA_INVALID_ARGS,
    PCA_INVALID_DURATION,
    PCA_ACCESS_DENIED,
    SLR_NOT_FOUND,
    OTHER
  )
}

type KeyAlgorithm = "RSA_2048" | "RSA_1024" | "RSA_4096" | "EC_prime256v1" | "EC_secp384r1" | "EC_secp521r1"
object KeyAlgorithm {
  val RSA_2048: "RSA_2048" = "RSA_2048"
  val RSA_1024: "RSA_1024" = "RSA_1024"
  val RSA_4096: "RSA_4096" = "RSA_4096"
  val EC_prime256v1: "EC_prime256v1" = "EC_prime256v1"
  val EC_secp384r1: "EC_secp384r1" = "EC_secp384r1"
  val EC_secp521r1: "EC_secp521r1" = "EC_secp521r1"

  @inline def values = js.Array[KeyAlgorithm](RSA_2048, RSA_1024, RSA_4096, EC_prime256v1, EC_secp384r1, EC_secp521r1)
}

type KeyUsageName = "DIGITAL_SIGNATURE" | "NON_REPUDIATION" | "KEY_ENCIPHERMENT" | "DATA_ENCIPHERMENT" | "KEY_AGREEMENT" | "CERTIFICATE_SIGNING" | "CRL_SIGNING" | "ENCIPHER_ONLY" | "DECIPHER_ONLY" | "ANY" | "CUSTOM"
object KeyUsageName {
  val DIGITAL_SIGNATURE: "DIGITAL_SIGNATURE" = "DIGITAL_SIGNATURE"
  val NON_REPUDIATION: "NON_REPUDIATION" = "NON_REPUDIATION"
  val KEY_ENCIPHERMENT: "KEY_ENCIPHERMENT" = "KEY_ENCIPHERMENT"
  val DATA_ENCIPHERMENT: "DATA_ENCIPHERMENT" = "DATA_ENCIPHERMENT"
  val KEY_AGREEMENT: "KEY_AGREEMENT" = "KEY_AGREEMENT"
  val CERTIFICATE_SIGNING: "CERTIFICATE_SIGNING" = "CERTIFICATE_SIGNING"
  val CRL_SIGNING: "CRL_SIGNING" = "CRL_SIGNING"
  val ENCIPHER_ONLY: "ENCIPHER_ONLY" = "ENCIPHER_ONLY"
  val DECIPHER_ONLY: "DECIPHER_ONLY" = "DECIPHER_ONLY"
  val ANY: "ANY" = "ANY"
  val CUSTOM: "CUSTOM" = "CUSTOM"

  @inline def values = js.Array[KeyUsageName](
    DIGITAL_SIGNATURE,
    NON_REPUDIATION,
    KEY_ENCIPHERMENT,
    DATA_ENCIPHERMENT,
    KEY_AGREEMENT,
    CERTIFICATE_SIGNING,
    CRL_SIGNING,
    ENCIPHER_ONLY,
    DECIPHER_ONLY,
    ANY,
    CUSTOM
  )
}

type RecordType = "CNAME"
object RecordType {
  val CNAME: "CNAME" = "CNAME"

  @inline def values = js.Array[RecordType](CNAME)
}

type RenewalEligibility = "ELIGIBLE" | "INELIGIBLE"
object RenewalEligibility {
  val ELIGIBLE: "ELIGIBLE" = "ELIGIBLE"
  val INELIGIBLE: "INELIGIBLE" = "INELIGIBLE"

  @inline def values = js.Array[RenewalEligibility](ELIGIBLE, INELIGIBLE)
}

type RenewalStatus = "PENDING_AUTO_RENEWAL" | "PENDING_VALIDATION" | "SUCCESS" | "FAILED"
object RenewalStatus {
  val PENDING_AUTO_RENEWAL: "PENDING_AUTO_RENEWAL" = "PENDING_AUTO_RENEWAL"
  val PENDING_VALIDATION: "PENDING_VALIDATION" = "PENDING_VALIDATION"
  val SUCCESS: "SUCCESS" = "SUCCESS"
  val FAILED: "FAILED" = "FAILED"

  @inline def values = js.Array[RenewalStatus](PENDING_AUTO_RENEWAL, PENDING_VALIDATION, SUCCESS, FAILED)
}

type RevocationReason = "UNSPECIFIED" | "KEY_COMPROMISE" | "CA_COMPROMISE" | "AFFILIATION_CHANGED" | "SUPERCEDED" | "CESSATION_OF_OPERATION" | "CERTIFICATE_HOLD" | "REMOVE_FROM_CRL" | "PRIVILEGE_WITHDRAWN" | "A_A_COMPROMISE"
object RevocationReason {
  val UNSPECIFIED: "UNSPECIFIED" = "UNSPECIFIED"
  val KEY_COMPROMISE: "KEY_COMPROMISE" = "KEY_COMPROMISE"
  val CA_COMPROMISE: "CA_COMPROMISE" = "CA_COMPROMISE"
  val AFFILIATION_CHANGED: "AFFILIATION_CHANGED" = "AFFILIATION_CHANGED"
  val SUPERCEDED: "SUPERCEDED" = "SUPERCEDED"
  val CESSATION_OF_OPERATION: "CESSATION_OF_OPERATION" = "CESSATION_OF_OPERATION"
  val CERTIFICATE_HOLD: "CERTIFICATE_HOLD" = "CERTIFICATE_HOLD"
  val REMOVE_FROM_CRL: "REMOVE_FROM_CRL" = "REMOVE_FROM_CRL"
  val PRIVILEGE_WITHDRAWN: "PRIVILEGE_WITHDRAWN" = "PRIVILEGE_WITHDRAWN"
  val A_A_COMPROMISE: "A_A_COMPROMISE" = "A_A_COMPROMISE"

  @inline def values = js.Array[RevocationReason](
    UNSPECIFIED,
    KEY_COMPROMISE,
    CA_COMPROMISE,
    AFFILIATION_CHANGED,
    SUPERCEDED,
    CESSATION_OF_OPERATION,
    CERTIFICATE_HOLD,
    REMOVE_FROM_CRL,
    PRIVILEGE_WITHDRAWN,
    A_A_COMPROMISE
  )
}

type ValidationMethod = "EMAIL" | "DNS"
object ValidationMethod {
  val EMAIL: "EMAIL" = "EMAIL"
  val DNS: "DNS" = "DNS"

  @inline def values = js.Array[ValidationMethod](EMAIL, DNS)
}
