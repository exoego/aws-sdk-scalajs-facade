package facade.amazonaws.services.quicksight

import scalajs._

type AnalysisErrorType = "ACCESS_DENIED" | "SOURCE_NOT_FOUND" | "DATA_SET_NOT_FOUND" | "INTERNAL_FAILURE" | "PARAMETER_VALUE_INCOMPATIBLE" | "PARAMETER_TYPE_INVALID" | "PARAMETER_NOT_FOUND" | "COLUMN_TYPE_MISMATCH" | "COLUMN_GEOGRAPHIC_ROLE_MISMATCH" | "COLUMN_REPLACEMENT_MISSING"
object AnalysisErrorType {
  inline val ACCESS_DENIED: "ACCESS_DENIED" = "ACCESS_DENIED"
  inline val SOURCE_NOT_FOUND: "SOURCE_NOT_FOUND" = "SOURCE_NOT_FOUND"
  inline val DATA_SET_NOT_FOUND: "DATA_SET_NOT_FOUND" = "DATA_SET_NOT_FOUND"
  inline val INTERNAL_FAILURE: "INTERNAL_FAILURE" = "INTERNAL_FAILURE"
  inline val PARAMETER_VALUE_INCOMPATIBLE: "PARAMETER_VALUE_INCOMPATIBLE" = "PARAMETER_VALUE_INCOMPATIBLE"
  inline val PARAMETER_TYPE_INVALID: "PARAMETER_TYPE_INVALID" = "PARAMETER_TYPE_INVALID"
  inline val PARAMETER_NOT_FOUND: "PARAMETER_NOT_FOUND" = "PARAMETER_NOT_FOUND"
  inline val COLUMN_TYPE_MISMATCH: "COLUMN_TYPE_MISMATCH" = "COLUMN_TYPE_MISMATCH"
  inline val COLUMN_GEOGRAPHIC_ROLE_MISMATCH: "COLUMN_GEOGRAPHIC_ROLE_MISMATCH" = "COLUMN_GEOGRAPHIC_ROLE_MISMATCH"
  inline val COLUMN_REPLACEMENT_MISSING: "COLUMN_REPLACEMENT_MISSING" = "COLUMN_REPLACEMENT_MISSING"

  inline def values: js.Array[AnalysisErrorType] = js.Array(
    ACCESS_DENIED,
    SOURCE_NOT_FOUND,
    DATA_SET_NOT_FOUND,
    INTERNAL_FAILURE,
    PARAMETER_VALUE_INCOMPATIBLE,
    PARAMETER_TYPE_INVALID,
    PARAMETER_NOT_FOUND,
    COLUMN_TYPE_MISMATCH,
    COLUMN_GEOGRAPHIC_ROLE_MISMATCH,
    COLUMN_REPLACEMENT_MISSING
  )
}

type AnalysisFilterAttribute = "QUICKSIGHT_USER"
object AnalysisFilterAttribute {
  inline val QUICKSIGHT_USER: "QUICKSIGHT_USER" = "QUICKSIGHT_USER"

  inline def values: js.Array[AnalysisFilterAttribute] = js.Array(QUICKSIGHT_USER)
}

type AssignmentStatus = "ENABLED" | "DRAFT" | "DISABLED"
object AssignmentStatus {
  inline val ENABLED: "ENABLED" = "ENABLED"
  inline val DRAFT: "DRAFT" = "DRAFT"
  inline val DISABLED: "DISABLED" = "DISABLED"

  inline def values: js.Array[AssignmentStatus] = js.Array(ENABLED, DRAFT, DISABLED)
}

type ColumnDataType = "STRING" | "INTEGER" | "DECIMAL" | "DATETIME"
object ColumnDataType {
  inline val STRING: "STRING" = "STRING"
  inline val INTEGER: "INTEGER" = "INTEGER"
  inline val DECIMAL: "DECIMAL" = "DECIMAL"
  inline val DATETIME: "DATETIME" = "DATETIME"

  inline def values: js.Array[ColumnDataType] = js.Array(STRING, INTEGER, DECIMAL, DATETIME)
}

type DashboardBehavior = "ENABLED" | "DISABLED"
object DashboardBehavior {
  inline val ENABLED: "ENABLED" = "ENABLED"
  inline val DISABLED: "DISABLED" = "DISABLED"

  inline def values: js.Array[DashboardBehavior] = js.Array(ENABLED, DISABLED)
}

type DashboardErrorType = "ACCESS_DENIED" | "SOURCE_NOT_FOUND" | "DATA_SET_NOT_FOUND" | "INTERNAL_FAILURE" | "PARAMETER_VALUE_INCOMPATIBLE" | "PARAMETER_TYPE_INVALID" | "PARAMETER_NOT_FOUND" | "COLUMN_TYPE_MISMATCH" | "COLUMN_GEOGRAPHIC_ROLE_MISMATCH" | "COLUMN_REPLACEMENT_MISSING"
object DashboardErrorType {
  inline val ACCESS_DENIED: "ACCESS_DENIED" = "ACCESS_DENIED"
  inline val SOURCE_NOT_FOUND: "SOURCE_NOT_FOUND" = "SOURCE_NOT_FOUND"
  inline val DATA_SET_NOT_FOUND: "DATA_SET_NOT_FOUND" = "DATA_SET_NOT_FOUND"
  inline val INTERNAL_FAILURE: "INTERNAL_FAILURE" = "INTERNAL_FAILURE"
  inline val PARAMETER_VALUE_INCOMPATIBLE: "PARAMETER_VALUE_INCOMPATIBLE" = "PARAMETER_VALUE_INCOMPATIBLE"
  inline val PARAMETER_TYPE_INVALID: "PARAMETER_TYPE_INVALID" = "PARAMETER_TYPE_INVALID"
  inline val PARAMETER_NOT_FOUND: "PARAMETER_NOT_FOUND" = "PARAMETER_NOT_FOUND"
  inline val COLUMN_TYPE_MISMATCH: "COLUMN_TYPE_MISMATCH" = "COLUMN_TYPE_MISMATCH"
  inline val COLUMN_GEOGRAPHIC_ROLE_MISMATCH: "COLUMN_GEOGRAPHIC_ROLE_MISMATCH" = "COLUMN_GEOGRAPHIC_ROLE_MISMATCH"
  inline val COLUMN_REPLACEMENT_MISSING: "COLUMN_REPLACEMENT_MISSING" = "COLUMN_REPLACEMENT_MISSING"

  inline def values: js.Array[DashboardErrorType] = js.Array(
    ACCESS_DENIED,
    SOURCE_NOT_FOUND,
    DATA_SET_NOT_FOUND,
    INTERNAL_FAILURE,
    PARAMETER_VALUE_INCOMPATIBLE,
    PARAMETER_TYPE_INVALID,
    PARAMETER_NOT_FOUND,
    COLUMN_TYPE_MISMATCH,
    COLUMN_GEOGRAPHIC_ROLE_MISMATCH,
    COLUMN_REPLACEMENT_MISSING
  )
}

type DashboardFilterAttribute = "QUICKSIGHT_USER"
object DashboardFilterAttribute {
  inline val QUICKSIGHT_USER: "QUICKSIGHT_USER" = "QUICKSIGHT_USER"

  inline def values: js.Array[DashboardFilterAttribute] = js.Array(QUICKSIGHT_USER)
}

type DashboardUIState = "EXPANDED" | "COLLAPSED"
object DashboardUIState {
  inline val EXPANDED: "EXPANDED" = "EXPANDED"
  inline val COLLAPSED: "COLLAPSED" = "COLLAPSED"

  inline def values: js.Array[DashboardUIState] = js.Array(EXPANDED, COLLAPSED)
}

type DataSetImportMode = "SPICE" | "DIRECT_QUERY"
object DataSetImportMode {
  inline val SPICE: "SPICE" = "SPICE"
  inline val DIRECT_QUERY: "DIRECT_QUERY" = "DIRECT_QUERY"

  inline def values: js.Array[DataSetImportMode] = js.Array(SPICE, DIRECT_QUERY)
}

type DataSourceErrorInfoType = "ACCESS_DENIED" | "COPY_SOURCE_NOT_FOUND" | "TIMEOUT" | "ENGINE_VERSION_NOT_SUPPORTED" | "UNKNOWN_HOST" | "GENERIC_SQL_FAILURE" | "CONFLICT" | "UNKNOWN"
object DataSourceErrorInfoType {
  inline val ACCESS_DENIED: "ACCESS_DENIED" = "ACCESS_DENIED"
  inline val COPY_SOURCE_NOT_FOUND: "COPY_SOURCE_NOT_FOUND" = "COPY_SOURCE_NOT_FOUND"
  inline val TIMEOUT: "TIMEOUT" = "TIMEOUT"
  inline val ENGINE_VERSION_NOT_SUPPORTED: "ENGINE_VERSION_NOT_SUPPORTED" = "ENGINE_VERSION_NOT_SUPPORTED"
  inline val UNKNOWN_HOST: "UNKNOWN_HOST" = "UNKNOWN_HOST"
  inline val GENERIC_SQL_FAILURE: "GENERIC_SQL_FAILURE" = "GENERIC_SQL_FAILURE"
  inline val CONFLICT: "CONFLICT" = "CONFLICT"
  inline val UNKNOWN: "UNKNOWN" = "UNKNOWN"

  inline def values: js.Array[DataSourceErrorInfoType] = js.Array(ACCESS_DENIED, COPY_SOURCE_NOT_FOUND, TIMEOUT, ENGINE_VERSION_NOT_SUPPORTED, UNKNOWN_HOST, GENERIC_SQL_FAILURE, CONFLICT, UNKNOWN)
}

type DataSourceType = "ADOBE_ANALYTICS" | "AMAZON_ELASTICSEARCH" | "ATHENA" | "AURORA" | "AURORA_POSTGRESQL" | "AWS_IOT_ANALYTICS" | "GITHUB" | "JIRA" | "MARIADB" | "MYSQL" | "ORACLE" | "POSTGRESQL" | "PRESTO" | "REDSHIFT" | "S3" | "SALESFORCE" | "SERVICENOW" | "SNOWFLAKE" | "SPARK" | "SQLSERVER" | "TERADATA" | "TWITTER" | "TIMESTREAM"
object DataSourceType {
  inline val ADOBE_ANALYTICS: "ADOBE_ANALYTICS" = "ADOBE_ANALYTICS"
  inline val AMAZON_ELASTICSEARCH: "AMAZON_ELASTICSEARCH" = "AMAZON_ELASTICSEARCH"
  inline val ATHENA: "ATHENA" = "ATHENA"
  inline val AURORA: "AURORA" = "AURORA"
  inline val AURORA_POSTGRESQL: "AURORA_POSTGRESQL" = "AURORA_POSTGRESQL"
  inline val AWS_IOT_ANALYTICS: "AWS_IOT_ANALYTICS" = "AWS_IOT_ANALYTICS"
  inline val GITHUB: "GITHUB" = "GITHUB"
  inline val JIRA: "JIRA" = "JIRA"
  inline val MARIADB: "MARIADB" = "MARIADB"
  inline val MYSQL: "MYSQL" = "MYSQL"
  inline val ORACLE: "ORACLE" = "ORACLE"
  inline val POSTGRESQL: "POSTGRESQL" = "POSTGRESQL"
  inline val PRESTO: "PRESTO" = "PRESTO"
  inline val REDSHIFT: "REDSHIFT" = "REDSHIFT"
  inline val S3: "S3" = "S3"
  inline val SALESFORCE: "SALESFORCE" = "SALESFORCE"
  inline val SERVICENOW: "SERVICENOW" = "SERVICENOW"
  inline val SNOWFLAKE: "SNOWFLAKE" = "SNOWFLAKE"
  inline val SPARK: "SPARK" = "SPARK"
  inline val SQLSERVER: "SQLSERVER" = "SQLSERVER"
  inline val TERADATA: "TERADATA" = "TERADATA"
  inline val TWITTER: "TWITTER" = "TWITTER"
  inline val TIMESTREAM: "TIMESTREAM" = "TIMESTREAM"

  inline def values: js.Array[DataSourceType] = js.Array(
    ADOBE_ANALYTICS,
    AMAZON_ELASTICSEARCH,
    ATHENA,
    AURORA,
    AURORA_POSTGRESQL,
    AWS_IOT_ANALYTICS,
    GITHUB,
    JIRA,
    MARIADB,
    MYSQL,
    ORACLE,
    POSTGRESQL,
    PRESTO,
    REDSHIFT,
    S3,
    SALESFORCE,
    SERVICENOW,
    SNOWFLAKE,
    SPARK,
    SQLSERVER,
    TERADATA,
    TWITTER,
    TIMESTREAM
  )
}

type Edition = "STANDARD" | "ENTERPRISE"
object Edition {
  inline val STANDARD: "STANDARD" = "STANDARD"
  inline val ENTERPRISE: "ENTERPRISE" = "ENTERPRISE"

  inline def values: js.Array[Edition] = js.Array(STANDARD, ENTERPRISE)
}

type EmbeddingIdentityType = "IAM" | "QUICKSIGHT" | "ANONYMOUS"
object EmbeddingIdentityType {
  inline val IAM: "IAM" = "IAM"
  inline val QUICKSIGHT: "QUICKSIGHT" = "QUICKSIGHT"
  inline val ANONYMOUS: "ANONYMOUS" = "ANONYMOUS"

  inline def values: js.Array[EmbeddingIdentityType] = js.Array(IAM, QUICKSIGHT, ANONYMOUS)
}

type FileFormat = "CSV" | "TSV" | "CLF" | "ELF" | "XLSX" | "JSON"
object FileFormat {
  inline val CSV: "CSV" = "CSV"
  inline val TSV: "TSV" = "TSV"
  inline val CLF: "CLF" = "CLF"
  inline val ELF: "ELF" = "ELF"
  inline val XLSX: "XLSX" = "XLSX"
  inline val JSON: "JSON" = "JSON"

  inline def values: js.Array[FileFormat] = js.Array(CSV, TSV, CLF, ELF, XLSX, JSON)
}

type FilterOperator = "StringEquals"
object FilterOperator {
  inline val StringEquals: "StringEquals" = "StringEquals"

  inline def values: js.Array[FilterOperator] = js.Array(StringEquals)
}

type GeoSpatialCountryCode = "US"
object GeoSpatialCountryCode {
  inline val US: "US" = "US"

  inline def values: js.Array[GeoSpatialCountryCode] = js.Array(US)
}

type GeoSpatialDataRole = "COUNTRY" | "STATE" | "COUNTY" | "CITY" | "POSTCODE" | "LONGITUDE" | "LATITUDE"
object GeoSpatialDataRole {
  inline val COUNTRY: "COUNTRY" = "COUNTRY"
  inline val STATE: "STATE" = "STATE"
  inline val COUNTY: "COUNTY" = "COUNTY"
  inline val CITY: "CITY" = "CITY"
  inline val POSTCODE: "POSTCODE" = "POSTCODE"
  inline val LONGITUDE: "LONGITUDE" = "LONGITUDE"
  inline val LATITUDE: "LATITUDE" = "LATITUDE"

  inline def values: js.Array[GeoSpatialDataRole] = js.Array(COUNTRY, STATE, COUNTY, CITY, POSTCODE, LONGITUDE, LATITUDE)
}

type IdentityStore = "QUICKSIGHT"
object IdentityStore {
  inline val QUICKSIGHT: "QUICKSIGHT" = "QUICKSIGHT"

  inline def values: js.Array[IdentityStore] = js.Array(QUICKSIGHT)
}

type IdentityType = "IAM" | "QUICKSIGHT"
object IdentityType {
  inline val IAM: "IAM" = "IAM"
  inline val QUICKSIGHT: "QUICKSIGHT" = "QUICKSIGHT"

  inline def values: js.Array[IdentityType] = js.Array(IAM, QUICKSIGHT)
}

type IngestionErrorType = "FAILURE_TO_ASSUME_ROLE" | "INGESTION_SUPERSEDED" | "INGESTION_CANCELED" | "DATA_SET_DELETED" | "DATA_SET_NOT_SPICE" | "S3_UPLOADED_FILE_DELETED" | "S3_MANIFEST_ERROR" | "DATA_TOLERANCE_EXCEPTION" | "SPICE_TABLE_NOT_FOUND" | "DATA_SET_SIZE_LIMIT_EXCEEDED" | "ROW_SIZE_LIMIT_EXCEEDED" | "ACCOUNT_CAPACITY_LIMIT_EXCEEDED" | "CUSTOMER_ERROR" | "DATA_SOURCE_NOT_FOUND" | "IAM_ROLE_NOT_AVAILABLE" | "CONNECTION_FAILURE" | "SQL_TABLE_NOT_FOUND" | "PERMISSION_DENIED" | "SSL_CERTIFICATE_VALIDATION_FAILURE" | "OAUTH_TOKEN_FAILURE" | "SOURCE_API_LIMIT_EXCEEDED_FAILURE" | "PASSWORD_AUTHENTICATION_FAILURE" | "SQL_SCHEMA_MISMATCH_ERROR" | "INVALID_DATE_FORMAT" | "INVALID_DATAPREP_SYNTAX" | "SOURCE_RESOURCE_LIMIT_EXCEEDED" | "SQL_INVALID_PARAMETER_VALUE" | "QUERY_TIMEOUT" | "SQL_NUMERIC_OVERFLOW" | "UNRESOLVABLE_HOST" | "UNROUTABLE_HOST" | "SQL_EXCEPTION" | "S3_FILE_INACCESSIBLE" | "IOT_FILE_NOT_FOUND" | "IOT_DATA_SET_FILE_EMPTY" | "INVALID_DATA_SOURCE_CONFIG" |
  "DATA_SOURCE_AUTH_FAILED" | "DATA_SOURCE_CONNECTION_FAILED" | "FAILURE_TO_PROCESS_JSON_FILE" | "INTERNAL_SERVICE_ERROR"
object IngestionErrorType {
  inline val FAILURE_TO_ASSUME_ROLE: "FAILURE_TO_ASSUME_ROLE" = "FAILURE_TO_ASSUME_ROLE"
  inline val INGESTION_SUPERSEDED: "INGESTION_SUPERSEDED" = "INGESTION_SUPERSEDED"
  inline val INGESTION_CANCELED: "INGESTION_CANCELED" = "INGESTION_CANCELED"
  inline val DATA_SET_DELETED: "DATA_SET_DELETED" = "DATA_SET_DELETED"
  inline val DATA_SET_NOT_SPICE: "DATA_SET_NOT_SPICE" = "DATA_SET_NOT_SPICE"
  inline val S3_UPLOADED_FILE_DELETED: "S3_UPLOADED_FILE_DELETED" = "S3_UPLOADED_FILE_DELETED"
  inline val S3_MANIFEST_ERROR: "S3_MANIFEST_ERROR" = "S3_MANIFEST_ERROR"
  inline val DATA_TOLERANCE_EXCEPTION: "DATA_TOLERANCE_EXCEPTION" = "DATA_TOLERANCE_EXCEPTION"
  inline val SPICE_TABLE_NOT_FOUND: "SPICE_TABLE_NOT_FOUND" = "SPICE_TABLE_NOT_FOUND"
  inline val DATA_SET_SIZE_LIMIT_EXCEEDED: "DATA_SET_SIZE_LIMIT_EXCEEDED" = "DATA_SET_SIZE_LIMIT_EXCEEDED"
  inline val ROW_SIZE_LIMIT_EXCEEDED: "ROW_SIZE_LIMIT_EXCEEDED" = "ROW_SIZE_LIMIT_EXCEEDED"
  inline val ACCOUNT_CAPACITY_LIMIT_EXCEEDED: "ACCOUNT_CAPACITY_LIMIT_EXCEEDED" = "ACCOUNT_CAPACITY_LIMIT_EXCEEDED"
  inline val CUSTOMER_ERROR: "CUSTOMER_ERROR" = "CUSTOMER_ERROR"
  inline val DATA_SOURCE_NOT_FOUND: "DATA_SOURCE_NOT_FOUND" = "DATA_SOURCE_NOT_FOUND"
  inline val IAM_ROLE_NOT_AVAILABLE: "IAM_ROLE_NOT_AVAILABLE" = "IAM_ROLE_NOT_AVAILABLE"
  inline val CONNECTION_FAILURE: "CONNECTION_FAILURE" = "CONNECTION_FAILURE"
  inline val SQL_TABLE_NOT_FOUND: "SQL_TABLE_NOT_FOUND" = "SQL_TABLE_NOT_FOUND"
  inline val PERMISSION_DENIED: "PERMISSION_DENIED" = "PERMISSION_DENIED"
  inline val SSL_CERTIFICATE_VALIDATION_FAILURE: "SSL_CERTIFICATE_VALIDATION_FAILURE" = "SSL_CERTIFICATE_VALIDATION_FAILURE"
  inline val OAUTH_TOKEN_FAILURE: "OAUTH_TOKEN_FAILURE" = "OAUTH_TOKEN_FAILURE"
  inline val SOURCE_API_LIMIT_EXCEEDED_FAILURE: "SOURCE_API_LIMIT_EXCEEDED_FAILURE" = "SOURCE_API_LIMIT_EXCEEDED_FAILURE"
  inline val PASSWORD_AUTHENTICATION_FAILURE: "PASSWORD_AUTHENTICATION_FAILURE" = "PASSWORD_AUTHENTICATION_FAILURE"
  inline val SQL_SCHEMA_MISMATCH_ERROR: "SQL_SCHEMA_MISMATCH_ERROR" = "SQL_SCHEMA_MISMATCH_ERROR"
  inline val INVALID_DATE_FORMAT: "INVALID_DATE_FORMAT" = "INVALID_DATE_FORMAT"
  inline val INVALID_DATAPREP_SYNTAX: "INVALID_DATAPREP_SYNTAX" = "INVALID_DATAPREP_SYNTAX"
  inline val SOURCE_RESOURCE_LIMIT_EXCEEDED: "SOURCE_RESOURCE_LIMIT_EXCEEDED" = "SOURCE_RESOURCE_LIMIT_EXCEEDED"
  inline val SQL_INVALID_PARAMETER_VALUE: "SQL_INVALID_PARAMETER_VALUE" = "SQL_INVALID_PARAMETER_VALUE"
  inline val QUERY_TIMEOUT: "QUERY_TIMEOUT" = "QUERY_TIMEOUT"
  inline val SQL_NUMERIC_OVERFLOW: "SQL_NUMERIC_OVERFLOW" = "SQL_NUMERIC_OVERFLOW"
  inline val UNRESOLVABLE_HOST: "UNRESOLVABLE_HOST" = "UNRESOLVABLE_HOST"
  inline val UNROUTABLE_HOST: "UNROUTABLE_HOST" = "UNROUTABLE_HOST"
  inline val SQL_EXCEPTION: "SQL_EXCEPTION" = "SQL_EXCEPTION"
  inline val S3_FILE_INACCESSIBLE: "S3_FILE_INACCESSIBLE" = "S3_FILE_INACCESSIBLE"
  inline val IOT_FILE_NOT_FOUND: "IOT_FILE_NOT_FOUND" = "IOT_FILE_NOT_FOUND"
  inline val IOT_DATA_SET_FILE_EMPTY: "IOT_DATA_SET_FILE_EMPTY" = "IOT_DATA_SET_FILE_EMPTY"
  inline val INVALID_DATA_SOURCE_CONFIG: "INVALID_DATA_SOURCE_CONFIG" = "INVALID_DATA_SOURCE_CONFIG"
  inline val DATA_SOURCE_AUTH_FAILED: "DATA_SOURCE_AUTH_FAILED" = "DATA_SOURCE_AUTH_FAILED"
  inline val DATA_SOURCE_CONNECTION_FAILED: "DATA_SOURCE_CONNECTION_FAILED" = "DATA_SOURCE_CONNECTION_FAILED"
  inline val FAILURE_TO_PROCESS_JSON_FILE: "FAILURE_TO_PROCESS_JSON_FILE" = "FAILURE_TO_PROCESS_JSON_FILE"
  inline val INTERNAL_SERVICE_ERROR: "INTERNAL_SERVICE_ERROR" = "INTERNAL_SERVICE_ERROR"

  inline def values: js.Array[IngestionErrorType] = js.Array(
    FAILURE_TO_ASSUME_ROLE,
    INGESTION_SUPERSEDED,
    INGESTION_CANCELED,
    DATA_SET_DELETED,
    DATA_SET_NOT_SPICE,
    S3_UPLOADED_FILE_DELETED,
    S3_MANIFEST_ERROR,
    DATA_TOLERANCE_EXCEPTION,
    SPICE_TABLE_NOT_FOUND,
    DATA_SET_SIZE_LIMIT_EXCEEDED,
    ROW_SIZE_LIMIT_EXCEEDED,
    ACCOUNT_CAPACITY_LIMIT_EXCEEDED,
    CUSTOMER_ERROR,
    DATA_SOURCE_NOT_FOUND,
    IAM_ROLE_NOT_AVAILABLE,
    CONNECTION_FAILURE,
    SQL_TABLE_NOT_FOUND,
    PERMISSION_DENIED,
    SSL_CERTIFICATE_VALIDATION_FAILURE,
    OAUTH_TOKEN_FAILURE,
    SOURCE_API_LIMIT_EXCEEDED_FAILURE,
    PASSWORD_AUTHENTICATION_FAILURE,
    SQL_SCHEMA_MISMATCH_ERROR,
    INVALID_DATE_FORMAT,
    INVALID_DATAPREP_SYNTAX,
    SOURCE_RESOURCE_LIMIT_EXCEEDED,
    SQL_INVALID_PARAMETER_VALUE,
    QUERY_TIMEOUT,
    SQL_NUMERIC_OVERFLOW,
    UNRESOLVABLE_HOST,
    UNROUTABLE_HOST,
    SQL_EXCEPTION,
    S3_FILE_INACCESSIBLE,
    IOT_FILE_NOT_FOUND,
    IOT_DATA_SET_FILE_EMPTY,
    INVALID_DATA_SOURCE_CONFIG,
    DATA_SOURCE_AUTH_FAILED,
    DATA_SOURCE_CONNECTION_FAILED,
    FAILURE_TO_PROCESS_JSON_FILE,
    INTERNAL_SERVICE_ERROR
  )
}

type IngestionRequestSource = "MANUAL" | "SCHEDULED"
object IngestionRequestSource {
  inline val MANUAL: "MANUAL" = "MANUAL"
  inline val SCHEDULED: "SCHEDULED" = "SCHEDULED"

  inline def values: js.Array[IngestionRequestSource] = js.Array(MANUAL, SCHEDULED)
}

type IngestionRequestType = "INITIAL_INGESTION" | "EDIT" | "INCREMENTAL_REFRESH" | "FULL_REFRESH"
object IngestionRequestType {
  inline val INITIAL_INGESTION: "INITIAL_INGESTION" = "INITIAL_INGESTION"
  inline val EDIT: "EDIT" = "EDIT"
  inline val INCREMENTAL_REFRESH: "INCREMENTAL_REFRESH" = "INCREMENTAL_REFRESH"
  inline val FULL_REFRESH: "FULL_REFRESH" = "FULL_REFRESH"

  inline def values: js.Array[IngestionRequestType] = js.Array(INITIAL_INGESTION, EDIT, INCREMENTAL_REFRESH, FULL_REFRESH)
}

type IngestionStatus = "INITIALIZED" | "QUEUED" | "RUNNING" | "FAILED" | "COMPLETED" | "CANCELLED"
object IngestionStatus {
  inline val INITIALIZED: "INITIALIZED" = "INITIALIZED"
  inline val QUEUED: "QUEUED" = "QUEUED"
  inline val RUNNING: "RUNNING" = "RUNNING"
  inline val FAILED: "FAILED" = "FAILED"
  inline val COMPLETED: "COMPLETED" = "COMPLETED"
  inline val CANCELLED: "CANCELLED" = "CANCELLED"

  inline def values: js.Array[IngestionStatus] = js.Array(INITIALIZED, QUEUED, RUNNING, FAILED, COMPLETED, CANCELLED)
}

type InputColumnDataType = "STRING" | "INTEGER" | "DECIMAL" | "DATETIME" | "BIT" | "BOOLEAN" | "JSON"
object InputColumnDataType {
  inline val STRING: "STRING" = "STRING"
  inline val INTEGER: "INTEGER" = "INTEGER"
  inline val DECIMAL: "DECIMAL" = "DECIMAL"
  inline val DATETIME: "DATETIME" = "DATETIME"
  inline val BIT: "BIT" = "BIT"
  inline val BOOLEAN: "BOOLEAN" = "BOOLEAN"
  inline val JSON: "JSON" = "JSON"

  inline def values: js.Array[InputColumnDataType] = js.Array(STRING, INTEGER, DECIMAL, DATETIME, BIT, BOOLEAN, JSON)
}

type JoinType = "INNER" | "OUTER" | "LEFT" | "RIGHT"
object JoinType {
  inline val INNER: "INNER" = "INNER"
  inline val OUTER: "OUTER" = "OUTER"
  inline val LEFT: "LEFT" = "LEFT"
  inline val RIGHT: "RIGHT" = "RIGHT"

  inline def values: js.Array[JoinType] = js.Array(INNER, OUTER, LEFT, RIGHT)
}

type NamespaceErrorType = "PERMISSION_DENIED" | "INTERNAL_SERVICE_ERROR"
object NamespaceErrorType {
  inline val PERMISSION_DENIED: "PERMISSION_DENIED" = "PERMISSION_DENIED"
  inline val INTERNAL_SERVICE_ERROR: "INTERNAL_SERVICE_ERROR" = "INTERNAL_SERVICE_ERROR"

  inline def values: js.Array[NamespaceErrorType] = js.Array(PERMISSION_DENIED, INTERNAL_SERVICE_ERROR)
}

type NamespaceStatus = "CREATED" | "CREATING" | "DELETING" | "RETRYABLE_FAILURE" | "NON_RETRYABLE_FAILURE"
object NamespaceStatus {
  inline val CREATED: "CREATED" = "CREATED"
  inline val CREATING: "CREATING" = "CREATING"
  inline val DELETING: "DELETING" = "DELETING"
  inline val RETRYABLE_FAILURE: "RETRYABLE_FAILURE" = "RETRYABLE_FAILURE"
  inline val NON_RETRYABLE_FAILURE: "NON_RETRYABLE_FAILURE" = "NON_RETRYABLE_FAILURE"

  inline def values: js.Array[NamespaceStatus] = js.Array(CREATED, CREATING, DELETING, RETRYABLE_FAILURE, NON_RETRYABLE_FAILURE)
}

type ResourceStatus = "CREATION_IN_PROGRESS" | "CREATION_SUCCESSFUL" | "CREATION_FAILED" | "UPDATE_IN_PROGRESS" | "UPDATE_SUCCESSFUL" | "UPDATE_FAILED" | "DELETED"
object ResourceStatus {
  inline val CREATION_IN_PROGRESS: "CREATION_IN_PROGRESS" = "CREATION_IN_PROGRESS"
  inline val CREATION_SUCCESSFUL: "CREATION_SUCCESSFUL" = "CREATION_SUCCESSFUL"
  inline val CREATION_FAILED: "CREATION_FAILED" = "CREATION_FAILED"
  inline val UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS" = "UPDATE_IN_PROGRESS"
  inline val UPDATE_SUCCESSFUL: "UPDATE_SUCCESSFUL" = "UPDATE_SUCCESSFUL"
  inline val UPDATE_FAILED: "UPDATE_FAILED" = "UPDATE_FAILED"
  inline val DELETED: "DELETED" = "DELETED"

  inline def values: js.Array[ResourceStatus] = js.Array(CREATION_IN_PROGRESS, CREATION_SUCCESSFUL, CREATION_FAILED, UPDATE_IN_PROGRESS, UPDATE_SUCCESSFUL, UPDATE_FAILED, DELETED)
}

type RowLevelPermissionPolicy = "GRANT_ACCESS" | "DENY_ACCESS"
object RowLevelPermissionPolicy {
  inline val GRANT_ACCESS: "GRANT_ACCESS" = "GRANT_ACCESS"
  inline val DENY_ACCESS: "DENY_ACCESS" = "DENY_ACCESS"

  inline def values: js.Array[RowLevelPermissionPolicy] = js.Array(GRANT_ACCESS, DENY_ACCESS)
}

type TemplateErrorType = "SOURCE_NOT_FOUND" | "DATA_SET_NOT_FOUND" | "INTERNAL_FAILURE" | "ACCESS_DENIED"
object TemplateErrorType {
  inline val SOURCE_NOT_FOUND: "SOURCE_NOT_FOUND" = "SOURCE_NOT_FOUND"
  inline val DATA_SET_NOT_FOUND: "DATA_SET_NOT_FOUND" = "DATA_SET_NOT_FOUND"
  inline val INTERNAL_FAILURE: "INTERNAL_FAILURE" = "INTERNAL_FAILURE"
  inline val ACCESS_DENIED: "ACCESS_DENIED" = "ACCESS_DENIED"

  inline def values: js.Array[TemplateErrorType] = js.Array(SOURCE_NOT_FOUND, DATA_SET_NOT_FOUND, INTERNAL_FAILURE, ACCESS_DENIED)
}

type TextQualifier = "DOUBLE_QUOTE" | "SINGLE_QUOTE"
object TextQualifier {
  inline val DOUBLE_QUOTE: "DOUBLE_QUOTE" = "DOUBLE_QUOTE"
  inline val SINGLE_QUOTE: "SINGLE_QUOTE" = "SINGLE_QUOTE"

  inline def values: js.Array[TextQualifier] = js.Array(DOUBLE_QUOTE, SINGLE_QUOTE)
}

type ThemeErrorType = "INTERNAL_FAILURE"
object ThemeErrorType {
  inline val INTERNAL_FAILURE: "INTERNAL_FAILURE" = "INTERNAL_FAILURE"

  inline def values: js.Array[ThemeErrorType] = js.Array(INTERNAL_FAILURE)
}

type ThemeType = "QUICKSIGHT" | "CUSTOM" | "ALL"
object ThemeType {
  inline val QUICKSIGHT: "QUICKSIGHT" = "QUICKSIGHT"
  inline val CUSTOM: "CUSTOM" = "CUSTOM"
  inline val ALL: "ALL" = "ALL"

  inline def values: js.Array[ThemeType] = js.Array(QUICKSIGHT, CUSTOM, ALL)
}

type UserRole = "ADMIN" | "AUTHOR" | "READER" | "RESTRICTED_AUTHOR" | "RESTRICTED_READER"
object UserRole {
  inline val ADMIN: "ADMIN" = "ADMIN"
  inline val AUTHOR: "AUTHOR" = "AUTHOR"
  inline val READER: "READER" = "READER"
  inline val RESTRICTED_AUTHOR: "RESTRICTED_AUTHOR" = "RESTRICTED_AUTHOR"
  inline val RESTRICTED_READER: "RESTRICTED_READER" = "RESTRICTED_READER"

  inline def values: js.Array[UserRole] = js.Array(ADMIN, AUTHOR, READER, RESTRICTED_AUTHOR, RESTRICTED_READER)
}
