package facade.amazonaws.services.mgn

import scalajs._

type ChangeServerLifeCycleStateSourceServerLifecycleState = "READY_FOR_TEST" | "READY_FOR_CUTOVER" | "CUTOVER"
object ChangeServerLifeCycleStateSourceServerLifecycleState {
  val READY_FOR_TEST: "READY_FOR_TEST" = "READY_FOR_TEST"
  val READY_FOR_CUTOVER: "READY_FOR_CUTOVER" = "READY_FOR_CUTOVER"
  val CUTOVER: "CUTOVER" = "CUTOVER"

  @inline def values = js.Array[ChangeServerLifeCycleStateSourceServerLifecycleState](READY_FOR_TEST, READY_FOR_CUTOVER, CUTOVER)
}

type DataReplicationErrorString = "AGENT_NOT_SEEN" | "SNAPSHOTS_FAILURE" | "NOT_CONVERGING" | "UNSTABLE_NETWORK" | "FAILED_TO_CREATE_SECURITY_GROUP" | "FAILED_TO_LAUNCH_REPLICATION_SERVER" | "FAILED_TO_BOOT_REPLICATION_SERVER" | "FAILED_TO_AUTHENTICATE_WITH_SERVICE" | "FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE" | "FAILED_TO_CREATE_STAGING_DISKS" | "FAILED_TO_ATTACH_STAGING_DISKS" | "FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT" | "FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER" | "FAILED_TO_START_DATA_TRANSFER"
object DataReplicationErrorString {
  val AGENT_NOT_SEEN: "AGENT_NOT_SEEN" = "AGENT_NOT_SEEN"
  val SNAPSHOTS_FAILURE: "SNAPSHOTS_FAILURE" = "SNAPSHOTS_FAILURE"
  val NOT_CONVERGING: "NOT_CONVERGING" = "NOT_CONVERGING"
  val UNSTABLE_NETWORK: "UNSTABLE_NETWORK" = "UNSTABLE_NETWORK"
  val FAILED_TO_CREATE_SECURITY_GROUP: "FAILED_TO_CREATE_SECURITY_GROUP" = "FAILED_TO_CREATE_SECURITY_GROUP"
  val FAILED_TO_LAUNCH_REPLICATION_SERVER: "FAILED_TO_LAUNCH_REPLICATION_SERVER" = "FAILED_TO_LAUNCH_REPLICATION_SERVER"
  val FAILED_TO_BOOT_REPLICATION_SERVER: "FAILED_TO_BOOT_REPLICATION_SERVER" = "FAILED_TO_BOOT_REPLICATION_SERVER"
  val FAILED_TO_AUTHENTICATE_WITH_SERVICE: "FAILED_TO_AUTHENTICATE_WITH_SERVICE" = "FAILED_TO_AUTHENTICATE_WITH_SERVICE"
  val FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE: "FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE" = "FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE"
  val FAILED_TO_CREATE_STAGING_DISKS: "FAILED_TO_CREATE_STAGING_DISKS" = "FAILED_TO_CREATE_STAGING_DISKS"
  val FAILED_TO_ATTACH_STAGING_DISKS: "FAILED_TO_ATTACH_STAGING_DISKS" = "FAILED_TO_ATTACH_STAGING_DISKS"
  val FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT: "FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT" = "FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT"
  val FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER: "FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER" = "FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER"
  val FAILED_TO_START_DATA_TRANSFER: "FAILED_TO_START_DATA_TRANSFER" = "FAILED_TO_START_DATA_TRANSFER"

  @inline def values = js.Array[DataReplicationErrorString](
    AGENT_NOT_SEEN,
    SNAPSHOTS_FAILURE,
    NOT_CONVERGING,
    UNSTABLE_NETWORK,
    FAILED_TO_CREATE_SECURITY_GROUP,
    FAILED_TO_LAUNCH_REPLICATION_SERVER,
    FAILED_TO_BOOT_REPLICATION_SERVER,
    FAILED_TO_AUTHENTICATE_WITH_SERVICE,
    FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE,
    FAILED_TO_CREATE_STAGING_DISKS,
    FAILED_TO_ATTACH_STAGING_DISKS,
    FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT,
    FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER,
    FAILED_TO_START_DATA_TRANSFER
  )
}

type DataReplicationInitiationStepName = "WAIT" | "CREATE_SECURITY_GROUP" | "LAUNCH_REPLICATION_SERVER" | "BOOT_REPLICATION_SERVER" | "AUTHENTICATE_WITH_SERVICE" | "DOWNLOAD_REPLICATION_SOFTWARE" | "CREATE_STAGING_DISKS" | "ATTACH_STAGING_DISKS" | "PAIR_REPLICATION_SERVER_WITH_AGENT" | "CONNECT_AGENT_TO_REPLICATION_SERVER" | "START_DATA_TRANSFER"
object DataReplicationInitiationStepName {
  val WAIT: "WAIT" = "WAIT"
  val CREATE_SECURITY_GROUP: "CREATE_SECURITY_GROUP" = "CREATE_SECURITY_GROUP"
  val LAUNCH_REPLICATION_SERVER: "LAUNCH_REPLICATION_SERVER" = "LAUNCH_REPLICATION_SERVER"
  val BOOT_REPLICATION_SERVER: "BOOT_REPLICATION_SERVER" = "BOOT_REPLICATION_SERVER"
  val AUTHENTICATE_WITH_SERVICE: "AUTHENTICATE_WITH_SERVICE" = "AUTHENTICATE_WITH_SERVICE"
  val DOWNLOAD_REPLICATION_SOFTWARE: "DOWNLOAD_REPLICATION_SOFTWARE" = "DOWNLOAD_REPLICATION_SOFTWARE"
  val CREATE_STAGING_DISKS: "CREATE_STAGING_DISKS" = "CREATE_STAGING_DISKS"
  val ATTACH_STAGING_DISKS: "ATTACH_STAGING_DISKS" = "ATTACH_STAGING_DISKS"
  val PAIR_REPLICATION_SERVER_WITH_AGENT: "PAIR_REPLICATION_SERVER_WITH_AGENT" = "PAIR_REPLICATION_SERVER_WITH_AGENT"
  val CONNECT_AGENT_TO_REPLICATION_SERVER: "CONNECT_AGENT_TO_REPLICATION_SERVER" = "CONNECT_AGENT_TO_REPLICATION_SERVER"
  val START_DATA_TRANSFER: "START_DATA_TRANSFER" = "START_DATA_TRANSFER"

  @inline def values = js.Array[DataReplicationInitiationStepName](
    WAIT,
    CREATE_SECURITY_GROUP,
    LAUNCH_REPLICATION_SERVER,
    BOOT_REPLICATION_SERVER,
    AUTHENTICATE_WITH_SERVICE,
    DOWNLOAD_REPLICATION_SOFTWARE,
    CREATE_STAGING_DISKS,
    ATTACH_STAGING_DISKS,
    PAIR_REPLICATION_SERVER_WITH_AGENT,
    CONNECT_AGENT_TO_REPLICATION_SERVER,
    START_DATA_TRANSFER
  )
}

type DataReplicationInitiationStepStatus = "NOT_STARTED" | "IN_PROGRESS" | "SUCCEEDED" | "FAILED" | "SKIPPED"
object DataReplicationInitiationStepStatus {
  val NOT_STARTED: "NOT_STARTED" = "NOT_STARTED"
  val IN_PROGRESS: "IN_PROGRESS" = "IN_PROGRESS"
  val SUCCEEDED: "SUCCEEDED" = "SUCCEEDED"
  val FAILED: "FAILED" = "FAILED"
  val SKIPPED: "SKIPPED" = "SKIPPED"

  @inline def values = js.Array[DataReplicationInitiationStepStatus](NOT_STARTED, IN_PROGRESS, SUCCEEDED, FAILED, SKIPPED)
}

type DataReplicationState = "STOPPED" | "INITIATING" | "INITIAL_SYNC" | "BACKLOG" | "CREATING_SNAPSHOT" | "CONTINUOUS" | "PAUSED" | "RESCAN" | "STALLED" | "DISCONNECTED"
object DataReplicationState {
  val STOPPED: "STOPPED" = "STOPPED"
  val INITIATING: "INITIATING" = "INITIATING"
  val INITIAL_SYNC: "INITIAL_SYNC" = "INITIAL_SYNC"
  val BACKLOG: "BACKLOG" = "BACKLOG"
  val CREATING_SNAPSHOT: "CREATING_SNAPSHOT" = "CREATING_SNAPSHOT"
  val CONTINUOUS: "CONTINUOUS" = "CONTINUOUS"
  val PAUSED: "PAUSED" = "PAUSED"
  val RESCAN: "RESCAN" = "RESCAN"
  val STALLED: "STALLED" = "STALLED"
  val DISCONNECTED: "DISCONNECTED" = "DISCONNECTED"

  @inline def values = js.Array[DataReplicationState](STOPPED, INITIATING, INITIAL_SYNC, BACKLOG, CREATING_SNAPSHOT, CONTINUOUS, PAUSED, RESCAN, STALLED, DISCONNECTED)
}

type FirstBoot = "WAITING" | "SUCCEEDED" | "UNKNOWN" | "STOPPED"
object FirstBoot {
  val WAITING: "WAITING" = "WAITING"
  val SUCCEEDED: "SUCCEEDED" = "SUCCEEDED"
  val UNKNOWN: "UNKNOWN" = "UNKNOWN"
  val STOPPED: "STOPPED" = "STOPPED"

  @inline def values = js.Array[FirstBoot](WAITING, SUCCEEDED, UNKNOWN, STOPPED)
}

type InitiatedBy = "START_TEST" | "START_CUTOVER" | "DIAGNOSTIC" | "TERMINATE"
object InitiatedBy {
  val START_TEST: "START_TEST" = "START_TEST"
  val START_CUTOVER: "START_CUTOVER" = "START_CUTOVER"
  val DIAGNOSTIC: "DIAGNOSTIC" = "DIAGNOSTIC"
  val TERMINATE: "TERMINATE" = "TERMINATE"

  @inline def values = js.Array[InitiatedBy](START_TEST, START_CUTOVER, DIAGNOSTIC, TERMINATE)
}

type JobLogEvent = "JOB_START" | "SERVER_SKIPPED" | "CLEANUP_START" | "CLEANUP_END" | "CLEANUP_FAIL" | "SNAPSHOT_START" | "SNAPSHOT_END" | "SNAPSHOT_FAIL" | "USING_PREVIOUS_SNAPSHOT" | "CONVERSION_START" | "CONVERSION_END" | "CONVERSION_FAIL" | "LAUNCH_START" | "LAUNCH_FAILED" | "JOB_CANCEL" | "JOB_END"
object JobLogEvent {
  val JOB_START: "JOB_START" = "JOB_START"
  val SERVER_SKIPPED: "SERVER_SKIPPED" = "SERVER_SKIPPED"
  val CLEANUP_START: "CLEANUP_START" = "CLEANUP_START"
  val CLEANUP_END: "CLEANUP_END" = "CLEANUP_END"
  val CLEANUP_FAIL: "CLEANUP_FAIL" = "CLEANUP_FAIL"
  val SNAPSHOT_START: "SNAPSHOT_START" = "SNAPSHOT_START"
  val SNAPSHOT_END: "SNAPSHOT_END" = "SNAPSHOT_END"
  val SNAPSHOT_FAIL: "SNAPSHOT_FAIL" = "SNAPSHOT_FAIL"
  val USING_PREVIOUS_SNAPSHOT: "USING_PREVIOUS_SNAPSHOT" = "USING_PREVIOUS_SNAPSHOT"
  val CONVERSION_START: "CONVERSION_START" = "CONVERSION_START"
  val CONVERSION_END: "CONVERSION_END" = "CONVERSION_END"
  val CONVERSION_FAIL: "CONVERSION_FAIL" = "CONVERSION_FAIL"
  val LAUNCH_START: "LAUNCH_START" = "LAUNCH_START"
  val LAUNCH_FAILED: "LAUNCH_FAILED" = "LAUNCH_FAILED"
  val JOB_CANCEL: "JOB_CANCEL" = "JOB_CANCEL"
  val JOB_END: "JOB_END" = "JOB_END"

  @inline def values = js.Array[JobLogEvent](
    JOB_START,
    SERVER_SKIPPED,
    CLEANUP_START,
    CLEANUP_END,
    CLEANUP_FAIL,
    SNAPSHOT_START,
    SNAPSHOT_END,
    SNAPSHOT_FAIL,
    USING_PREVIOUS_SNAPSHOT,
    CONVERSION_START,
    CONVERSION_END,
    CONVERSION_FAIL,
    LAUNCH_START,
    LAUNCH_FAILED,
    JOB_CANCEL,
    JOB_END
  )
}

type JobStatus = "PENDING" | "STARTED" | "COMPLETED"
object JobStatus {
  val PENDING: "PENDING" = "PENDING"
  val STARTED: "STARTED" = "STARTED"
  val COMPLETED: "COMPLETED" = "COMPLETED"

  @inline def values = js.Array[JobStatus](PENDING, STARTED, COMPLETED)
}

type JobType = "LAUNCH" | "TERMINATE"
object JobType {
  val LAUNCH: "LAUNCH" = "LAUNCH"
  val TERMINATE: "TERMINATE" = "TERMINATE"

  @inline def values = js.Array[JobType](LAUNCH, TERMINATE)
}

type LaunchDisposition = "STOPPED" | "STARTED"
object LaunchDisposition {
  val STOPPED: "STOPPED" = "STOPPED"
  val STARTED: "STARTED" = "STARTED"

  @inline def values = js.Array[LaunchDisposition](STOPPED, STARTED)
}

type LaunchStatus = "PENDING" | "IN_PROGRESS" | "LAUNCHED" | "FAILED" | "TERMINATED"
object LaunchStatus {
  val PENDING: "PENDING" = "PENDING"
  val IN_PROGRESS: "IN_PROGRESS" = "IN_PROGRESS"
  val LAUNCHED: "LAUNCHED" = "LAUNCHED"
  val FAILED: "FAILED" = "FAILED"
  val TERMINATED: "TERMINATED" = "TERMINATED"

  @inline def values = js.Array[LaunchStatus](PENDING, IN_PROGRESS, LAUNCHED, FAILED, TERMINATED)
}

type LifeCycleState = "STOPPED" | "NOT_READY" | "READY_FOR_TEST" | "TESTING" | "READY_FOR_CUTOVER" | "CUTTING_OVER" | "CUTOVER" | "DISCONNECTED"
object LifeCycleState {
  val STOPPED: "STOPPED" = "STOPPED"
  val NOT_READY: "NOT_READY" = "NOT_READY"
  val READY_FOR_TEST: "READY_FOR_TEST" = "READY_FOR_TEST"
  val TESTING: "TESTING" = "TESTING"
  val READY_FOR_CUTOVER: "READY_FOR_CUTOVER" = "READY_FOR_CUTOVER"
  val CUTTING_OVER: "CUTTING_OVER" = "CUTTING_OVER"
  val CUTOVER: "CUTOVER" = "CUTOVER"
  val DISCONNECTED: "DISCONNECTED" = "DISCONNECTED"

  @inline def values = js.Array[LifeCycleState](STOPPED, NOT_READY, READY_FOR_TEST, TESTING, READY_FOR_CUTOVER, CUTTING_OVER, CUTOVER, DISCONNECTED)
}

type ReplicationConfigurationDataPlaneRouting = "PRIVATE_IP" | "PUBLIC_IP"
object ReplicationConfigurationDataPlaneRouting {
  val PRIVATE_IP: "PRIVATE_IP" = "PRIVATE_IP"
  val PUBLIC_IP: "PUBLIC_IP" = "PUBLIC_IP"

  @inline def values = js.Array[ReplicationConfigurationDataPlaneRouting](PRIVATE_IP, PUBLIC_IP)
}

type ReplicationConfigurationDefaultLargeStagingDiskType = "GP2" | "ST1"
object ReplicationConfigurationDefaultLargeStagingDiskType {
  val GP2: "GP2" = "GP2"
  val ST1: "ST1" = "ST1"

  @inline def values = js.Array[ReplicationConfigurationDefaultLargeStagingDiskType](GP2, ST1)
}

type ReplicationConfigurationEbsEncryption = "NONE" | "DEFAULT" | "CUSTOM"
object ReplicationConfigurationEbsEncryption {
  val NONE: "NONE" = "NONE"
  val DEFAULT: "DEFAULT" = "DEFAULT"
  val CUSTOM: "CUSTOM" = "CUSTOM"

  @inline def values = js.Array[ReplicationConfigurationEbsEncryption](NONE, DEFAULT, CUSTOM)
}

type ReplicationConfigurationReplicatedDiskStagingDiskType = "AUTO" | "GP2" | "IO1" | "SC1" | "ST1" | "STANDARD"
object ReplicationConfigurationReplicatedDiskStagingDiskType {
  val AUTO: "AUTO" = "AUTO"
  val GP2: "GP2" = "GP2"
  val IO1: "IO1" = "IO1"
  val SC1: "SC1" = "SC1"
  val ST1: "ST1" = "ST1"
  val STANDARD: "STANDARD" = "STANDARD"

  @inline def values = js.Array[ReplicationConfigurationReplicatedDiskStagingDiskType](AUTO, GP2, IO1, SC1, ST1, STANDARD)
}

type TargetInstanceTypeRightSizingMethod = "NONE" | "BASIC"
object TargetInstanceTypeRightSizingMethod {
  val NONE: "NONE" = "NONE"
  val BASIC: "BASIC" = "BASIC"

  @inline def values = js.Array[TargetInstanceTypeRightSizingMethod](NONE, BASIC)
}
