package facade.amazonaws.services.appstream

import scalajs.js

type AccessEndpointType = "STREAMING"
object AccessEndpointType {
  inline val STREAMING: "STREAMING" = "STREAMING"

  inline def values: js.Array[AccessEndpointType] = js.Array(STREAMING)
}

type Action = "CLIPBOARD_COPY_FROM_LOCAL_DEVICE" | "CLIPBOARD_COPY_TO_LOCAL_DEVICE" | "FILE_UPLOAD" | "FILE_DOWNLOAD" | "PRINTING_TO_LOCAL_DEVICE" | "DOMAIN_PASSWORD_SIGNIN" | "DOMAIN_SMART_CARD_SIGNIN"
object Action {
  inline val CLIPBOARD_COPY_FROM_LOCAL_DEVICE: "CLIPBOARD_COPY_FROM_LOCAL_DEVICE" = "CLIPBOARD_COPY_FROM_LOCAL_DEVICE"
  inline val CLIPBOARD_COPY_TO_LOCAL_DEVICE: "CLIPBOARD_COPY_TO_LOCAL_DEVICE" = "CLIPBOARD_COPY_TO_LOCAL_DEVICE"
  inline val FILE_UPLOAD: "FILE_UPLOAD" = "FILE_UPLOAD"
  inline val FILE_DOWNLOAD: "FILE_DOWNLOAD" = "FILE_DOWNLOAD"
  inline val PRINTING_TO_LOCAL_DEVICE: "PRINTING_TO_LOCAL_DEVICE" = "PRINTING_TO_LOCAL_DEVICE"
  inline val DOMAIN_PASSWORD_SIGNIN: "DOMAIN_PASSWORD_SIGNIN" = "DOMAIN_PASSWORD_SIGNIN"
  inline val DOMAIN_SMART_CARD_SIGNIN: "DOMAIN_SMART_CARD_SIGNIN" = "DOMAIN_SMART_CARD_SIGNIN"

  inline def values: js.Array[Action] = js.Array(
    CLIPBOARD_COPY_FROM_LOCAL_DEVICE,
    CLIPBOARD_COPY_TO_LOCAL_DEVICE,
    FILE_UPLOAD,
    FILE_DOWNLOAD,
    PRINTING_TO_LOCAL_DEVICE,
    DOMAIN_PASSWORD_SIGNIN,
    DOMAIN_SMART_CARD_SIGNIN
  )
}

type AppVisibility = "ALL" | "ASSOCIATED"
object AppVisibility {
  inline val ALL: "ALL" = "ALL"
  inline val ASSOCIATED: "ASSOCIATED" = "ASSOCIATED"

  inline def values: js.Array[AppVisibility] = js.Array(ALL, ASSOCIATED)
}

type ApplicationAttribute = "LAUNCH_PARAMETERS" | "WORKING_DIRECTORY"
object ApplicationAttribute {
  inline val LAUNCH_PARAMETERS: "LAUNCH_PARAMETERS" = "LAUNCH_PARAMETERS"
  inline val WORKING_DIRECTORY: "WORKING_DIRECTORY" = "WORKING_DIRECTORY"

  inline def values: js.Array[ApplicationAttribute] = js.Array(LAUNCH_PARAMETERS, WORKING_DIRECTORY)
}

type AuthenticationType = "API" | "SAML" | "USERPOOL" | "AWS_AD"
object AuthenticationType {
  inline val API: "API" = "API"
  inline val SAML: "SAML" = "SAML"
  inline val USERPOOL: "USERPOOL" = "USERPOOL"
  inline val AWS_AD: "AWS_AD" = "AWS_AD"

  inline def values: js.Array[AuthenticationType] = js.Array(API, SAML, USERPOOL, AWS_AD)
}

type CertificateBasedAuthStatus = "DISABLED" | "ENABLED" | "ENABLED_NO_DIRECTORY_LOGIN_FALLBACK"
object CertificateBasedAuthStatus {
  inline val DISABLED: "DISABLED" = "DISABLED"
  inline val ENABLED: "ENABLED" = "ENABLED"
  inline val ENABLED_NO_DIRECTORY_LOGIN_FALLBACK: "ENABLED_NO_DIRECTORY_LOGIN_FALLBACK" = "ENABLED_NO_DIRECTORY_LOGIN_FALLBACK"

  inline def values: js.Array[CertificateBasedAuthStatus] = js.Array(DISABLED, ENABLED, ENABLED_NO_DIRECTORY_LOGIN_FALLBACK)
}

/** The fleet attribute.
  */
type FleetAttribute = "VPC_CONFIGURATION" | "VPC_CONFIGURATION_SECURITY_GROUP_IDS" | "DOMAIN_JOIN_INFO" | "IAM_ROLE_ARN" | "USB_DEVICE_FILTER_STRINGS" | "SESSION_SCRIPT_S3_LOCATION"
object FleetAttribute {
  inline val VPC_CONFIGURATION: "VPC_CONFIGURATION" = "VPC_CONFIGURATION"
  inline val VPC_CONFIGURATION_SECURITY_GROUP_IDS: "VPC_CONFIGURATION_SECURITY_GROUP_IDS" = "VPC_CONFIGURATION_SECURITY_GROUP_IDS"
  inline val DOMAIN_JOIN_INFO: "DOMAIN_JOIN_INFO" = "DOMAIN_JOIN_INFO"
  inline val IAM_ROLE_ARN: "IAM_ROLE_ARN" = "IAM_ROLE_ARN"
  inline val USB_DEVICE_FILTER_STRINGS: "USB_DEVICE_FILTER_STRINGS" = "USB_DEVICE_FILTER_STRINGS"
  inline val SESSION_SCRIPT_S3_LOCATION: "SESSION_SCRIPT_S3_LOCATION" = "SESSION_SCRIPT_S3_LOCATION"

  inline def values: js.Array[FleetAttribute] = js.Array(VPC_CONFIGURATION, VPC_CONFIGURATION_SECURITY_GROUP_IDS, DOMAIN_JOIN_INFO, IAM_ROLE_ARN, USB_DEVICE_FILTER_STRINGS, SESSION_SCRIPT_S3_LOCATION)
}

type FleetErrorCode =
  "IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION" | "IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION" | "IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION" | "NETWORK_INTERFACE_LIMIT_EXCEEDED" | "INTERNAL_SERVICE_ERROR" | "IAM_SERVICE_ROLE_IS_MISSING" | "MACHINE_ROLE_IS_MISSING" | "STS_DISABLED_IN_REGION" | "SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES" | "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION" | "SUBNET_NOT_FOUND" | "IMAGE_NOT_FOUND" | "INVALID_SUBNET_CONFIGURATION" | "SECURITY_GROUPS_NOT_FOUND" | "IGW_NOT_ATTACHED" | "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION" | "FLEET_STOPPED" | "FLEET_INSTANCE_PROVISIONING_FAILURE" | "DOMAIN_JOIN_ERROR_FILE_NOT_FOUND" | "DOMAIN_JOIN_ERROR_ACCESS_DENIED" | "DOMAIN_JOIN_ERROR_LOGON_FAILURE" | "DOMAIN_JOIN_ERROR_INVALID_PARAMETER" | "DOMAIN_JOIN_ERROR_MORE_DATA" | "DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN" | "DOMAIN_JOIN_ERROR_NOT_SUPPORTED" | "DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME" | "DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED" | "DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED" | "DOMAIN_JOIN_NERR_PASSWORD_EXPIRED" | "DOMAIN_JOIN_INTERNAL_SERVICE_ERROR"
object FleetErrorCode {
  inline val IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION: "IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION" = "IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION"
  inline val IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION: "IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION" = "IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION"
  inline val IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION: "IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION" = "IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION"
  inline val NETWORK_INTERFACE_LIMIT_EXCEEDED: "NETWORK_INTERFACE_LIMIT_EXCEEDED" = "NETWORK_INTERFACE_LIMIT_EXCEEDED"
  inline val INTERNAL_SERVICE_ERROR: "INTERNAL_SERVICE_ERROR" = "INTERNAL_SERVICE_ERROR"
  inline val IAM_SERVICE_ROLE_IS_MISSING: "IAM_SERVICE_ROLE_IS_MISSING" = "IAM_SERVICE_ROLE_IS_MISSING"
  inline val MACHINE_ROLE_IS_MISSING: "MACHINE_ROLE_IS_MISSING" = "MACHINE_ROLE_IS_MISSING"
  inline val STS_DISABLED_IN_REGION: "STS_DISABLED_IN_REGION" = "STS_DISABLED_IN_REGION"
  inline val SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES: "SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES" = "SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES"
  inline val IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION: "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION" = "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION"
  inline val SUBNET_NOT_FOUND: "SUBNET_NOT_FOUND" = "SUBNET_NOT_FOUND"
  inline val IMAGE_NOT_FOUND: "IMAGE_NOT_FOUND" = "IMAGE_NOT_FOUND"
  inline val INVALID_SUBNET_CONFIGURATION: "INVALID_SUBNET_CONFIGURATION" = "INVALID_SUBNET_CONFIGURATION"
  inline val SECURITY_GROUPS_NOT_FOUND: "SECURITY_GROUPS_NOT_FOUND" = "SECURITY_GROUPS_NOT_FOUND"
  inline val IGW_NOT_ATTACHED: "IGW_NOT_ATTACHED" = "IGW_NOT_ATTACHED"
  inline val IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION: "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION" = "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION"
  inline val FLEET_STOPPED: "FLEET_STOPPED" = "FLEET_STOPPED"
  inline val FLEET_INSTANCE_PROVISIONING_FAILURE: "FLEET_INSTANCE_PROVISIONING_FAILURE" = "FLEET_INSTANCE_PROVISIONING_FAILURE"
  inline val DOMAIN_JOIN_ERROR_FILE_NOT_FOUND: "DOMAIN_JOIN_ERROR_FILE_NOT_FOUND" = "DOMAIN_JOIN_ERROR_FILE_NOT_FOUND"
  inline val DOMAIN_JOIN_ERROR_ACCESS_DENIED: "DOMAIN_JOIN_ERROR_ACCESS_DENIED" = "DOMAIN_JOIN_ERROR_ACCESS_DENIED"
  inline val DOMAIN_JOIN_ERROR_LOGON_FAILURE: "DOMAIN_JOIN_ERROR_LOGON_FAILURE" = "DOMAIN_JOIN_ERROR_LOGON_FAILURE"
  inline val DOMAIN_JOIN_ERROR_INVALID_PARAMETER: "DOMAIN_JOIN_ERROR_INVALID_PARAMETER" = "DOMAIN_JOIN_ERROR_INVALID_PARAMETER"
  inline val DOMAIN_JOIN_ERROR_MORE_DATA: "DOMAIN_JOIN_ERROR_MORE_DATA" = "DOMAIN_JOIN_ERROR_MORE_DATA"
  inline val DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN: "DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN" = "DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN"
  inline val DOMAIN_JOIN_ERROR_NOT_SUPPORTED: "DOMAIN_JOIN_ERROR_NOT_SUPPORTED" = "DOMAIN_JOIN_ERROR_NOT_SUPPORTED"
  inline val DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME: "DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME" = "DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME"
  inline val DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED: "DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED" = "DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED"
  inline val DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED: "DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED" = "DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED"
  inline val DOMAIN_JOIN_NERR_PASSWORD_EXPIRED: "DOMAIN_JOIN_NERR_PASSWORD_EXPIRED" = "DOMAIN_JOIN_NERR_PASSWORD_EXPIRED"
  inline val DOMAIN_JOIN_INTERNAL_SERVICE_ERROR: "DOMAIN_JOIN_INTERNAL_SERVICE_ERROR" = "DOMAIN_JOIN_INTERNAL_SERVICE_ERROR"

  inline def values: js.Array[FleetErrorCode] = js.Array(
    IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION,
    IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION,
    IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION,
    NETWORK_INTERFACE_LIMIT_EXCEEDED,
    INTERNAL_SERVICE_ERROR,
    IAM_SERVICE_ROLE_IS_MISSING,
    MACHINE_ROLE_IS_MISSING,
    STS_DISABLED_IN_REGION,
    SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES,
    IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION,
    SUBNET_NOT_FOUND,
    IMAGE_NOT_FOUND,
    INVALID_SUBNET_CONFIGURATION,
    SECURITY_GROUPS_NOT_FOUND,
    IGW_NOT_ATTACHED,
    IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION,
    FLEET_STOPPED,
    FLEET_INSTANCE_PROVISIONING_FAILURE,
    DOMAIN_JOIN_ERROR_FILE_NOT_FOUND,
    DOMAIN_JOIN_ERROR_ACCESS_DENIED,
    DOMAIN_JOIN_ERROR_LOGON_FAILURE,
    DOMAIN_JOIN_ERROR_INVALID_PARAMETER,
    DOMAIN_JOIN_ERROR_MORE_DATA,
    DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN,
    DOMAIN_JOIN_ERROR_NOT_SUPPORTED,
    DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME,
    DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED,
    DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED,
    DOMAIN_JOIN_NERR_PASSWORD_EXPIRED,
    DOMAIN_JOIN_INTERNAL_SERVICE_ERROR
  )
}

type FleetState = "STARTING" | "RUNNING" | "STOPPING" | "STOPPED"
object FleetState {
  inline val STARTING: "STARTING" = "STARTING"
  inline val RUNNING: "RUNNING" = "RUNNING"
  inline val STOPPING: "STOPPING" = "STOPPING"
  inline val STOPPED: "STOPPED" = "STOPPED"

  inline def values: js.Array[FleetState] = js.Array(STARTING, RUNNING, STOPPING, STOPPED)
}

type FleetType = "ALWAYS_ON" | "ON_DEMAND" | "ELASTIC"
object FleetType {
  inline val ALWAYS_ON: "ALWAYS_ON" = "ALWAYS_ON"
  inline val ON_DEMAND: "ON_DEMAND" = "ON_DEMAND"
  inline val ELASTIC: "ELASTIC" = "ELASTIC"

  inline def values: js.Array[FleetType] = js.Array(ALWAYS_ON, ON_DEMAND, ELASTIC)
}

type ImageBuilderState = "PENDING" | "UPDATING_AGENT" | "RUNNING" | "STOPPING" | "STOPPED" | "REBOOTING" | "SNAPSHOTTING" | "DELETING" | "FAILED" | "UPDATING" | "PENDING_QUALIFICATION"
object ImageBuilderState {
  inline val PENDING: "PENDING" = "PENDING"
  inline val UPDATING_AGENT: "UPDATING_AGENT" = "UPDATING_AGENT"
  inline val RUNNING: "RUNNING" = "RUNNING"
  inline val STOPPING: "STOPPING" = "STOPPING"
  inline val STOPPED: "STOPPED" = "STOPPED"
  inline val REBOOTING: "REBOOTING" = "REBOOTING"
  inline val SNAPSHOTTING: "SNAPSHOTTING" = "SNAPSHOTTING"
  inline val DELETING: "DELETING" = "DELETING"
  inline val FAILED: "FAILED" = "FAILED"
  inline val UPDATING: "UPDATING" = "UPDATING"
  inline val PENDING_QUALIFICATION: "PENDING_QUALIFICATION" = "PENDING_QUALIFICATION"

  inline def values: js.Array[ImageBuilderState] = js.Array(PENDING, UPDATING_AGENT, RUNNING, STOPPING, STOPPED, REBOOTING, SNAPSHOTTING, DELETING, FAILED, UPDATING, PENDING_QUALIFICATION)
}

type ImageBuilderStateChangeReasonCode = "INTERNAL_ERROR" | "IMAGE_UNAVAILABLE"
object ImageBuilderStateChangeReasonCode {
  inline val INTERNAL_ERROR: "INTERNAL_ERROR" = "INTERNAL_ERROR"
  inline val IMAGE_UNAVAILABLE: "IMAGE_UNAVAILABLE" = "IMAGE_UNAVAILABLE"

  inline def values: js.Array[ImageBuilderStateChangeReasonCode] = js.Array(INTERNAL_ERROR, IMAGE_UNAVAILABLE)
}

type ImageState = "PENDING" | "AVAILABLE" | "FAILED" | "COPYING" | "DELETING" | "CREATING" | "IMPORTING"
object ImageState {
  inline val PENDING: "PENDING" = "PENDING"
  inline val AVAILABLE: "AVAILABLE" = "AVAILABLE"
  inline val FAILED: "FAILED" = "FAILED"
  inline val COPYING: "COPYING" = "COPYING"
  inline val DELETING: "DELETING" = "DELETING"
  inline val CREATING: "CREATING" = "CREATING"
  inline val IMPORTING: "IMPORTING" = "IMPORTING"

  inline def values: js.Array[ImageState] = js.Array(PENDING, AVAILABLE, FAILED, COPYING, DELETING, CREATING, IMPORTING)
}

type ImageStateChangeReasonCode = "INTERNAL_ERROR" | "IMAGE_BUILDER_NOT_AVAILABLE" | "IMAGE_COPY_FAILURE"
object ImageStateChangeReasonCode {
  inline val INTERNAL_ERROR: "INTERNAL_ERROR" = "INTERNAL_ERROR"
  inline val IMAGE_BUILDER_NOT_AVAILABLE: "IMAGE_BUILDER_NOT_AVAILABLE" = "IMAGE_BUILDER_NOT_AVAILABLE"
  inline val IMAGE_COPY_FAILURE: "IMAGE_COPY_FAILURE" = "IMAGE_COPY_FAILURE"

  inline def values: js.Array[ImageStateChangeReasonCode] = js.Array(INTERNAL_ERROR, IMAGE_BUILDER_NOT_AVAILABLE, IMAGE_COPY_FAILURE)
}

type MessageAction = "SUPPRESS" | "RESEND"
object MessageAction {
  inline val SUPPRESS: "SUPPRESS" = "SUPPRESS"
  inline val RESEND: "RESEND" = "RESEND"

  inline def values: js.Array[MessageAction] = js.Array(SUPPRESS, RESEND)
}

type Permission = "ENABLED" | "DISABLED"
object Permission {
  inline val ENABLED: "ENABLED" = "ENABLED"
  inline val DISABLED: "DISABLED" = "DISABLED"

  inline def values: js.Array[Permission] = js.Array(ENABLED, DISABLED)
}

type PlatformType = "WINDOWS" | "WINDOWS_SERVER_2016" | "WINDOWS_SERVER_2019" | "AMAZON_LINUX2"
object PlatformType {
  inline val WINDOWS: "WINDOWS" = "WINDOWS"
  inline val WINDOWS_SERVER_2016: "WINDOWS_SERVER_2016" = "WINDOWS_SERVER_2016"
  inline val WINDOWS_SERVER_2019: "WINDOWS_SERVER_2019" = "WINDOWS_SERVER_2019"
  inline val AMAZON_LINUX2: "AMAZON_LINUX2" = "AMAZON_LINUX2"

  inline def values: js.Array[PlatformType] = js.Array(WINDOWS, WINDOWS_SERVER_2016, WINDOWS_SERVER_2019, AMAZON_LINUX2)
}

type PreferredProtocol = "TCP" | "UDP"
object PreferredProtocol {
  inline val TCP: "TCP" = "TCP"
  inline val UDP: "UDP" = "UDP"

  inline def values: js.Array[PreferredProtocol] = js.Array(TCP, UDP)
}

type SessionConnectionState = "CONNECTED" | "NOT_CONNECTED"
object SessionConnectionState {
  inline val CONNECTED: "CONNECTED" = "CONNECTED"
  inline val NOT_CONNECTED: "NOT_CONNECTED" = "NOT_CONNECTED"

  inline def values: js.Array[SessionConnectionState] = js.Array(CONNECTED, NOT_CONNECTED)
}

/** Possible values for the state of a streaming session.
  */
type SessionState = "ACTIVE" | "PENDING" | "EXPIRED"
object SessionState {
  inline val ACTIVE: "ACTIVE" = "ACTIVE"
  inline val PENDING: "PENDING" = "PENDING"
  inline val EXPIRED: "EXPIRED" = "EXPIRED"

  inline def values: js.Array[SessionState] = js.Array(ACTIVE, PENDING, EXPIRED)
}

type StackAttribute = "STORAGE_CONNECTORS" | "STORAGE_CONNECTOR_HOMEFOLDERS" | "STORAGE_CONNECTOR_GOOGLE_DRIVE" | "STORAGE_CONNECTOR_ONE_DRIVE" | "REDIRECT_URL" | "FEEDBACK_URL" | "THEME_NAME" | "USER_SETTINGS" | "EMBED_HOST_DOMAINS" | "IAM_ROLE_ARN" | "ACCESS_ENDPOINTS" | "STREAMING_EXPERIENCE_SETTINGS"
object StackAttribute {
  inline val STORAGE_CONNECTORS: "STORAGE_CONNECTORS" = "STORAGE_CONNECTORS"
  inline val STORAGE_CONNECTOR_HOMEFOLDERS: "STORAGE_CONNECTOR_HOMEFOLDERS" = "STORAGE_CONNECTOR_HOMEFOLDERS"
  inline val STORAGE_CONNECTOR_GOOGLE_DRIVE: "STORAGE_CONNECTOR_GOOGLE_DRIVE" = "STORAGE_CONNECTOR_GOOGLE_DRIVE"
  inline val STORAGE_CONNECTOR_ONE_DRIVE: "STORAGE_CONNECTOR_ONE_DRIVE" = "STORAGE_CONNECTOR_ONE_DRIVE"
  inline val REDIRECT_URL: "REDIRECT_URL" = "REDIRECT_URL"
  inline val FEEDBACK_URL: "FEEDBACK_URL" = "FEEDBACK_URL"
  inline val THEME_NAME: "THEME_NAME" = "THEME_NAME"
  inline val USER_SETTINGS: "USER_SETTINGS" = "USER_SETTINGS"
  inline val EMBED_HOST_DOMAINS: "EMBED_HOST_DOMAINS" = "EMBED_HOST_DOMAINS"
  inline val IAM_ROLE_ARN: "IAM_ROLE_ARN" = "IAM_ROLE_ARN"
  inline val ACCESS_ENDPOINTS: "ACCESS_ENDPOINTS" = "ACCESS_ENDPOINTS"
  inline val STREAMING_EXPERIENCE_SETTINGS: "STREAMING_EXPERIENCE_SETTINGS" = "STREAMING_EXPERIENCE_SETTINGS"

  inline def values: js.Array[StackAttribute] = js.Array(
    STORAGE_CONNECTORS,
    STORAGE_CONNECTOR_HOMEFOLDERS,
    STORAGE_CONNECTOR_GOOGLE_DRIVE,
    STORAGE_CONNECTOR_ONE_DRIVE,
    REDIRECT_URL,
    FEEDBACK_URL,
    THEME_NAME,
    USER_SETTINGS,
    EMBED_HOST_DOMAINS,
    IAM_ROLE_ARN,
    ACCESS_ENDPOINTS,
    STREAMING_EXPERIENCE_SETTINGS
  )
}

type StackErrorCode = "STORAGE_CONNECTOR_ERROR" | "INTERNAL_SERVICE_ERROR"
object StackErrorCode {
  inline val STORAGE_CONNECTOR_ERROR: "STORAGE_CONNECTOR_ERROR" = "STORAGE_CONNECTOR_ERROR"
  inline val INTERNAL_SERVICE_ERROR: "INTERNAL_SERVICE_ERROR" = "INTERNAL_SERVICE_ERROR"

  inline def values: js.Array[StackErrorCode] = js.Array(STORAGE_CONNECTOR_ERROR, INTERNAL_SERVICE_ERROR)
}

/** The type of storage connector.
  */
type StorageConnectorType = "HOMEFOLDERS" | "GOOGLE_DRIVE" | "ONE_DRIVE"
object StorageConnectorType {
  inline val HOMEFOLDERS: "HOMEFOLDERS" = "HOMEFOLDERS"
  inline val GOOGLE_DRIVE: "GOOGLE_DRIVE" = "GOOGLE_DRIVE"
  inline val ONE_DRIVE: "ONE_DRIVE" = "ONE_DRIVE"

  inline def values: js.Array[StorageConnectorType] = js.Array(HOMEFOLDERS, GOOGLE_DRIVE, ONE_DRIVE)
}

type StreamView = "APP" | "DESKTOP"
object StreamView {
  inline val APP: "APP" = "APP"
  inline val DESKTOP: "DESKTOP" = "DESKTOP"

  inline def values: js.Array[StreamView] = js.Array(APP, DESKTOP)
}

type UsageReportExecutionErrorCode = "RESOURCE_NOT_FOUND" | "ACCESS_DENIED" | "INTERNAL_SERVICE_ERROR"
object UsageReportExecutionErrorCode {
  inline val RESOURCE_NOT_FOUND: "RESOURCE_NOT_FOUND" = "RESOURCE_NOT_FOUND"
  inline val ACCESS_DENIED: "ACCESS_DENIED" = "ACCESS_DENIED"
  inline val INTERNAL_SERVICE_ERROR: "INTERNAL_SERVICE_ERROR" = "INTERNAL_SERVICE_ERROR"

  inline def values: js.Array[UsageReportExecutionErrorCode] = js.Array(RESOURCE_NOT_FOUND, ACCESS_DENIED, INTERNAL_SERVICE_ERROR)
}

type UsageReportSchedule = "DAILY"
object UsageReportSchedule {
  inline val DAILY: "DAILY" = "DAILY"

  inline def values: js.Array[UsageReportSchedule] = js.Array(DAILY)
}

type UserStackAssociationErrorCode = "STACK_NOT_FOUND" | "USER_NAME_NOT_FOUND" | "DIRECTORY_NOT_FOUND" | "INTERNAL_ERROR"
object UserStackAssociationErrorCode {
  inline val STACK_NOT_FOUND: "STACK_NOT_FOUND" = "STACK_NOT_FOUND"
  inline val USER_NAME_NOT_FOUND: "USER_NAME_NOT_FOUND" = "USER_NAME_NOT_FOUND"
  inline val DIRECTORY_NOT_FOUND: "DIRECTORY_NOT_FOUND" = "DIRECTORY_NOT_FOUND"
  inline val INTERNAL_ERROR: "INTERNAL_ERROR" = "INTERNAL_ERROR"

  inline def values: js.Array[UserStackAssociationErrorCode] = js.Array(STACK_NOT_FOUND, USER_NAME_NOT_FOUND, DIRECTORY_NOT_FOUND, INTERNAL_ERROR)
}

type VisibilityType = "PUBLIC" | "PRIVATE" | "SHARED"
object VisibilityType {
  inline val PUBLIC: "PUBLIC" = "PUBLIC"
  inline val PRIVATE: "PRIVATE" = "PRIVATE"
  inline val SHARED: "SHARED" = "SHARED"

  inline def values: js.Array[VisibilityType] = js.Array(PUBLIC, PRIVATE, SHARED)
}
