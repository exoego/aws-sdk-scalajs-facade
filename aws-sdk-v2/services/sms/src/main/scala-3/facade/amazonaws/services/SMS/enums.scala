package facade.amazonaws.services.sms

import scalajs.js

type AppLaunchConfigurationStatus = "NOT_CONFIGURED" | "CONFIGURED"
object AppLaunchConfigurationStatus {
  inline val NOT_CONFIGURED: "NOT_CONFIGURED" = "NOT_CONFIGURED"
  inline val CONFIGURED: "CONFIGURED" = "CONFIGURED"

  inline def values: js.Array[AppLaunchConfigurationStatus] = js.Array(NOT_CONFIGURED, CONFIGURED)
}

type AppLaunchStatus = "READY_FOR_CONFIGURATION" | "CONFIGURATION_IN_PROGRESS" | "CONFIGURATION_INVALID" | "READY_FOR_LAUNCH" | "VALIDATION_IN_PROGRESS" | "LAUNCH_PENDING" | "LAUNCH_IN_PROGRESS" | "LAUNCHED" | "PARTIALLY_LAUNCHED" | "DELTA_LAUNCH_IN_PROGRESS" | "DELTA_LAUNCH_FAILED" | "LAUNCH_FAILED" | "TERMINATE_IN_PROGRESS" | "TERMINATE_FAILED" | "TERMINATED"
object AppLaunchStatus {
  inline val READY_FOR_CONFIGURATION: "READY_FOR_CONFIGURATION" = "READY_FOR_CONFIGURATION"
  inline val CONFIGURATION_IN_PROGRESS: "CONFIGURATION_IN_PROGRESS" = "CONFIGURATION_IN_PROGRESS"
  inline val CONFIGURATION_INVALID: "CONFIGURATION_INVALID" = "CONFIGURATION_INVALID"
  inline val READY_FOR_LAUNCH: "READY_FOR_LAUNCH" = "READY_FOR_LAUNCH"
  inline val VALIDATION_IN_PROGRESS: "VALIDATION_IN_PROGRESS" = "VALIDATION_IN_PROGRESS"
  inline val LAUNCH_PENDING: "LAUNCH_PENDING" = "LAUNCH_PENDING"
  inline val LAUNCH_IN_PROGRESS: "LAUNCH_IN_PROGRESS" = "LAUNCH_IN_PROGRESS"
  inline val LAUNCHED: "LAUNCHED" = "LAUNCHED"
  inline val PARTIALLY_LAUNCHED: "PARTIALLY_LAUNCHED" = "PARTIALLY_LAUNCHED"
  inline val DELTA_LAUNCH_IN_PROGRESS: "DELTA_LAUNCH_IN_PROGRESS" = "DELTA_LAUNCH_IN_PROGRESS"
  inline val DELTA_LAUNCH_FAILED: "DELTA_LAUNCH_FAILED" = "DELTA_LAUNCH_FAILED"
  inline val LAUNCH_FAILED: "LAUNCH_FAILED" = "LAUNCH_FAILED"
  inline val TERMINATE_IN_PROGRESS: "TERMINATE_IN_PROGRESS" = "TERMINATE_IN_PROGRESS"
  inline val TERMINATE_FAILED: "TERMINATE_FAILED" = "TERMINATE_FAILED"
  inline val TERMINATED: "TERMINATED" = "TERMINATED"

  inline def values: js.Array[AppLaunchStatus] = js.Array(
    READY_FOR_CONFIGURATION,
    CONFIGURATION_IN_PROGRESS,
    CONFIGURATION_INVALID,
    READY_FOR_LAUNCH,
    VALIDATION_IN_PROGRESS,
    LAUNCH_PENDING,
    LAUNCH_IN_PROGRESS,
    LAUNCHED,
    PARTIALLY_LAUNCHED,
    DELTA_LAUNCH_IN_PROGRESS,
    DELTA_LAUNCH_FAILED,
    LAUNCH_FAILED,
    TERMINATE_IN_PROGRESS,
    TERMINATE_FAILED,
    TERMINATED
  )
}

type AppReplicationConfigurationStatus = "NOT_CONFIGURED" | "CONFIGURED"
object AppReplicationConfigurationStatus {
  inline val NOT_CONFIGURED: "NOT_CONFIGURED" = "NOT_CONFIGURED"
  inline val CONFIGURED: "CONFIGURED" = "CONFIGURED"

  inline def values: js.Array[AppReplicationConfigurationStatus] = js.Array(NOT_CONFIGURED, CONFIGURED)
}

type AppReplicationStatus = "READY_FOR_CONFIGURATION" | "CONFIGURATION_IN_PROGRESS" | "CONFIGURATION_INVALID" | "READY_FOR_REPLICATION" | "VALIDATION_IN_PROGRESS" | "REPLICATION_PENDING" | "REPLICATION_IN_PROGRESS" | "REPLICATED" | "PARTIALLY_REPLICATED" | "DELTA_REPLICATION_IN_PROGRESS" | "DELTA_REPLICATED" | "DELTA_REPLICATION_FAILED" | "REPLICATION_FAILED" | "REPLICATION_STOPPING" | "REPLICATION_STOP_FAILED" | "REPLICATION_STOPPED"
object AppReplicationStatus {
  inline val READY_FOR_CONFIGURATION: "READY_FOR_CONFIGURATION" = "READY_FOR_CONFIGURATION"
  inline val CONFIGURATION_IN_PROGRESS: "CONFIGURATION_IN_PROGRESS" = "CONFIGURATION_IN_PROGRESS"
  inline val CONFIGURATION_INVALID: "CONFIGURATION_INVALID" = "CONFIGURATION_INVALID"
  inline val READY_FOR_REPLICATION: "READY_FOR_REPLICATION" = "READY_FOR_REPLICATION"
  inline val VALIDATION_IN_PROGRESS: "VALIDATION_IN_PROGRESS" = "VALIDATION_IN_PROGRESS"
  inline val REPLICATION_PENDING: "REPLICATION_PENDING" = "REPLICATION_PENDING"
  inline val REPLICATION_IN_PROGRESS: "REPLICATION_IN_PROGRESS" = "REPLICATION_IN_PROGRESS"
  inline val REPLICATED: "REPLICATED" = "REPLICATED"
  inline val PARTIALLY_REPLICATED: "PARTIALLY_REPLICATED" = "PARTIALLY_REPLICATED"
  inline val DELTA_REPLICATION_IN_PROGRESS: "DELTA_REPLICATION_IN_PROGRESS" = "DELTA_REPLICATION_IN_PROGRESS"
  inline val DELTA_REPLICATED: "DELTA_REPLICATED" = "DELTA_REPLICATED"
  inline val DELTA_REPLICATION_FAILED: "DELTA_REPLICATION_FAILED" = "DELTA_REPLICATION_FAILED"
  inline val REPLICATION_FAILED: "REPLICATION_FAILED" = "REPLICATION_FAILED"
  inline val REPLICATION_STOPPING: "REPLICATION_STOPPING" = "REPLICATION_STOPPING"
  inline val REPLICATION_STOP_FAILED: "REPLICATION_STOP_FAILED" = "REPLICATION_STOP_FAILED"
  inline val REPLICATION_STOPPED: "REPLICATION_STOPPED" = "REPLICATION_STOPPED"

  inline def values: js.Array[AppReplicationStatus] = js.Array(
    READY_FOR_CONFIGURATION,
    CONFIGURATION_IN_PROGRESS,
    CONFIGURATION_INVALID,
    READY_FOR_REPLICATION,
    VALIDATION_IN_PROGRESS,
    REPLICATION_PENDING,
    REPLICATION_IN_PROGRESS,
    REPLICATED,
    PARTIALLY_REPLICATED,
    DELTA_REPLICATION_IN_PROGRESS,
    DELTA_REPLICATED,
    DELTA_REPLICATION_FAILED,
    REPLICATION_FAILED,
    REPLICATION_STOPPING,
    REPLICATION_STOP_FAILED,
    REPLICATION_STOPPED
  )
}

type AppStatus = "CREATING" | "ACTIVE" | "UPDATING" | "DELETING" | "DELETED" | "DELETE_FAILED"
object AppStatus {
  inline val CREATING: "CREATING" = "CREATING"
  inline val ACTIVE: "ACTIVE" = "ACTIVE"
  inline val UPDATING: "UPDATING" = "UPDATING"
  inline val DELETING: "DELETING" = "DELETING"
  inline val DELETED: "DELETED" = "DELETED"
  inline val DELETE_FAILED: "DELETE_FAILED" = "DELETE_FAILED"

  inline def values: js.Array[AppStatus] = js.Array(CREATING, ACTIVE, UPDATING, DELETING, DELETED, DELETE_FAILED)
}

type AppValidationStrategy = "SSM"
object AppValidationStrategy {
  inline val SSM: "SSM" = "SSM"

  inline def values: js.Array[AppValidationStrategy] = js.Array(SSM)
}

type ConnectorCapability = "VSPHERE" | "SCVMM" | "HYPERV-MANAGER" | "SNAPSHOT_BATCHING" | "SMS_OPTIMIZED"
object ConnectorCapability {
  inline val VSPHERE: "VSPHERE" = "VSPHERE"
  inline val SCVMM: "SCVMM" = "SCVMM"
  inline val `HYPERV-MANAGER`: "HYPERV-MANAGER" = "HYPERV-MANAGER"
  inline val SNAPSHOT_BATCHING: "SNAPSHOT_BATCHING" = "SNAPSHOT_BATCHING"
  inline val SMS_OPTIMIZED: "SMS_OPTIMIZED" = "SMS_OPTIMIZED"

  inline def values: js.Array[ConnectorCapability] = js.Array(VSPHERE, SCVMM, `HYPERV-MANAGER`, SNAPSHOT_BATCHING, SMS_OPTIMIZED)
}

type ConnectorStatus = "HEALTHY" | "UNHEALTHY"
object ConnectorStatus {
  inline val HEALTHY: "HEALTHY" = "HEALTHY"
  inline val UNHEALTHY: "UNHEALTHY" = "UNHEALTHY"

  inline def values: js.Array[ConnectorStatus] = js.Array(HEALTHY, UNHEALTHY)
}

type LicenseType = "AWS" | "BYOL"
object LicenseType {
  inline val AWS: "AWS" = "AWS"
  inline val BYOL: "BYOL" = "BYOL"

  inline def values: js.Array[LicenseType] = js.Array(AWS, BYOL)
}

type OutputFormat = "JSON" | "YAML"
object OutputFormat {
  inline val JSON: "JSON" = "JSON"
  inline val YAML: "YAML" = "YAML"

  inline def values: js.Array[OutputFormat] = js.Array(JSON, YAML)
}

type ReplicationJobState = "PENDING" | "ACTIVE" | "FAILED" | "DELETING" | "DELETED" | "COMPLETED" | "PAUSED_ON_FAILURE" | "FAILING"
object ReplicationJobState {
  inline val PENDING: "PENDING" = "PENDING"
  inline val ACTIVE: "ACTIVE" = "ACTIVE"
  inline val FAILED: "FAILED" = "FAILED"
  inline val DELETING: "DELETING" = "DELETING"
  inline val DELETED: "DELETED" = "DELETED"
  inline val COMPLETED: "COMPLETED" = "COMPLETED"
  inline val PAUSED_ON_FAILURE: "PAUSED_ON_FAILURE" = "PAUSED_ON_FAILURE"
  inline val FAILING: "FAILING" = "FAILING"

  inline def values: js.Array[ReplicationJobState] = js.Array(PENDING, ACTIVE, FAILED, DELETING, DELETED, COMPLETED, PAUSED_ON_FAILURE, FAILING)
}

type ReplicationRunState = "PENDING" | "MISSED" | "ACTIVE" | "FAILED" | "COMPLETED" | "DELETING" | "DELETED"
object ReplicationRunState {
  inline val PENDING: "PENDING" = "PENDING"
  inline val MISSED: "MISSED" = "MISSED"
  inline val ACTIVE: "ACTIVE" = "ACTIVE"
  inline val FAILED: "FAILED" = "FAILED"
  inline val COMPLETED: "COMPLETED" = "COMPLETED"
  inline val DELETING: "DELETING" = "DELETING"
  inline val DELETED: "DELETED" = "DELETED"

  inline def values: js.Array[ReplicationRunState] = js.Array(PENDING, MISSED, ACTIVE, FAILED, COMPLETED, DELETING, DELETED)
}

type ReplicationRunType = "ON_DEMAND" | "AUTOMATIC"
object ReplicationRunType {
  inline val ON_DEMAND: "ON_DEMAND" = "ON_DEMAND"
  inline val AUTOMATIC: "AUTOMATIC" = "AUTOMATIC"

  inline def values: js.Array[ReplicationRunType] = js.Array(ON_DEMAND, AUTOMATIC)
}

type ScriptType = "SHELL_SCRIPT" | "POWERSHELL_SCRIPT"
object ScriptType {
  inline val SHELL_SCRIPT: "SHELL_SCRIPT" = "SHELL_SCRIPT"
  inline val POWERSHELL_SCRIPT: "POWERSHELL_SCRIPT" = "POWERSHELL_SCRIPT"

  inline def values: js.Array[ScriptType] = js.Array(SHELL_SCRIPT, POWERSHELL_SCRIPT)
}

type ServerCatalogStatus = "NOT_IMPORTED" | "IMPORTING" | "AVAILABLE" | "DELETED" | "EXPIRED"
object ServerCatalogStatus {
  inline val NOT_IMPORTED: "NOT_IMPORTED" = "NOT_IMPORTED"
  inline val IMPORTING: "IMPORTING" = "IMPORTING"
  inline val AVAILABLE: "AVAILABLE" = "AVAILABLE"
  inline val DELETED: "DELETED" = "DELETED"
  inline val EXPIRED: "EXPIRED" = "EXPIRED"

  inline def values: js.Array[ServerCatalogStatus] = js.Array(NOT_IMPORTED, IMPORTING, AVAILABLE, DELETED, EXPIRED)
}

type ServerType = "VIRTUAL_MACHINE"
object ServerType {
  inline val VIRTUAL_MACHINE: "VIRTUAL_MACHINE" = "VIRTUAL_MACHINE"

  inline def values: js.Array[ServerType] = js.Array(VIRTUAL_MACHINE)
}

type ServerValidationStrategy = "USERDATA"
object ServerValidationStrategy {
  inline val USERDATA: "USERDATA" = "USERDATA"

  inline def values: js.Array[ServerValidationStrategy] = js.Array(USERDATA)
}

type ValidationStatus = "READY_FOR_VALIDATION" | "PENDING" | "IN_PROGRESS" | "SUCCEEDED" | "FAILED"
object ValidationStatus {
  inline val READY_FOR_VALIDATION: "READY_FOR_VALIDATION" = "READY_FOR_VALIDATION"
  inline val PENDING: "PENDING" = "PENDING"
  inline val IN_PROGRESS: "IN_PROGRESS" = "IN_PROGRESS"
  inline val SUCCEEDED: "SUCCEEDED" = "SUCCEEDED"
  inline val FAILED: "FAILED" = "FAILED"

  inline def values: js.Array[ValidationStatus] = js.Array(READY_FOR_VALIDATION, PENDING, IN_PROGRESS, SUCCEEDED, FAILED)
}

type VmManagerType = "VSPHERE" | "SCVMM" | "HYPERV-MANAGER"
object VmManagerType {
  inline val VSPHERE: "VSPHERE" = "VSPHERE"
  inline val SCVMM: "SCVMM" = "SCVMM"
  inline val `HYPERV-MANAGER`: "HYPERV-MANAGER" = "HYPERV-MANAGER"

  inline def values: js.Array[VmManagerType] = js.Array(VSPHERE, SCVMM, `HYPERV-MANAGER`)
}
