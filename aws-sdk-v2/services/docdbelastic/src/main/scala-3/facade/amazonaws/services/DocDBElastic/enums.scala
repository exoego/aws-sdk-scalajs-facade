package facade.amazonaws.services.docdbelastic

import scalajs.js

type Auth = "PLAIN_TEXT" | "SECRET_ARN"
object Auth {
  inline val PLAIN_TEXT: "PLAIN_TEXT" = "PLAIN_TEXT"
  inline val SECRET_ARN: "SECRET_ARN" = "SECRET_ARN"

  inline def values: js.Array[Auth] = js.Array(PLAIN_TEXT, SECRET_ARN)
}

type Status = "CREATING" | "ACTIVE" | "DELETING" | "UPDATING" | "VPC_ENDPOINT_LIMIT_EXCEEDED" | "IP_ADDRESS_LIMIT_EXCEEDED" | "INVALID_SECURITY_GROUP_ID" | "INVALID_SUBNET_ID" | "INACCESSIBLE_ENCRYPTION_CREDS"
object Status {
  inline val CREATING: "CREATING" = "CREATING"
  inline val ACTIVE: "ACTIVE" = "ACTIVE"
  inline val DELETING: "DELETING" = "DELETING"
  inline val UPDATING: "UPDATING" = "UPDATING"
  inline val VPC_ENDPOINT_LIMIT_EXCEEDED: "VPC_ENDPOINT_LIMIT_EXCEEDED" = "VPC_ENDPOINT_LIMIT_EXCEEDED"
  inline val IP_ADDRESS_LIMIT_EXCEEDED: "IP_ADDRESS_LIMIT_EXCEEDED" = "IP_ADDRESS_LIMIT_EXCEEDED"
  inline val INVALID_SECURITY_GROUP_ID: "INVALID_SECURITY_GROUP_ID" = "INVALID_SECURITY_GROUP_ID"
  inline val INVALID_SUBNET_ID: "INVALID_SUBNET_ID" = "INVALID_SUBNET_ID"
  inline val INACCESSIBLE_ENCRYPTION_CREDS: "INACCESSIBLE_ENCRYPTION_CREDS" = "INACCESSIBLE_ENCRYPTION_CREDS"

  inline def values: js.Array[Status] = js.Array(
    CREATING,
    ACTIVE,
    DELETING,
    UPDATING,
    VPC_ENDPOINT_LIMIT_EXCEEDED,
    IP_ADDRESS_LIMIT_EXCEEDED,
    INVALID_SECURITY_GROUP_ID,
    INVALID_SUBNET_ID,
    INACCESSIBLE_ENCRYPTION_CREDS
  )
}
